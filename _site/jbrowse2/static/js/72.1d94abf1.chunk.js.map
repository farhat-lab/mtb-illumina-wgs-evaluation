{"version":3,"sources":["../../../plugins/sequence/src/TwoBitAdapter/TwoBitAdapter.ts"],"names":["TwoBitAdapter","config","twobit","twoBitOpts","filehandle","openLocation","readConfObject","TwoBitFile","this","getSequenceNames","getSequenceSizes","refSizes","Object","keys","map","refName","start","end","ObservableCreate","observer","a","getSequenceSize","size","regionEnd","undefined","Math","min","getSequence","seq","next","SimpleFeature","id","data","complete","BaseFeatureDataAdapter"],"mappings":"wRAcqBA,E,kDAKnB,WAAYC,GAAuC,2BACjD,cAAMA,IAHAC,YAE2C,EAEjD,IAAMC,EAAa,CACjBC,WAAYC,uBAAaC,yBAAeL,EAAQ,oBAHD,OAMjD,EAAKC,OAAS,IAAIK,aAAWJ,GANoB,E,0DAUjD,OAAOK,KAAKN,OAAOO,qB,mKAIID,KAAKN,OAAOQ,mB,cAA7BC,E,yBACCC,OAAOC,KAAKF,GAAUG,KAC3B,SAACC,GAAD,MAAwC,CACtCA,UACAC,MAAO,EACPC,IAAKN,EAASI,Q,2IAU0C,WAAzCA,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,IACnC,OAAOC,2BAAgB,uCAAU,WAAMC,GAAN,mBAAAC,EAAA,sEACZ,EAAKlB,OAAOmB,gBAAgBN,GADhB,cACzBO,EADyB,OAEzBC,OAAqBC,IAATF,EAAqBG,KAAKC,IAAIJ,EAAML,GAAOA,EAF9B,SAGL,EAAKf,OAAOyB,YACpCZ,EACAC,EACAO,GAN6B,QAGzBK,EAHyB,SAS7BT,EAASU,KACP,IAAIC,IAAc,CAChBC,GAAI,GAAF,OAAKhB,EAAL,YAAgBC,EAAhB,YAAyBO,GAC3BS,KAAM,CAAEjB,UAASC,QAAOC,IAAKM,EAAWK,UAI9CT,EAASc,WAhBsB,2CAAV,yD,8CAlCjBC","file":"static/js/72.1d94abf1.chunk.js","sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  SequenceAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TwoBitFile } from '@gmod/twobit'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Instance } from 'mobx-state-tree'\n\nimport configSchema from './configSchema'\n\nexport default class TwoBitAdapter\n  extends BaseFeatureDataAdapter\n  implements SequenceAdapter {\n  private twobit: typeof TwoBitFile\n\n  constructor(config: Instance<typeof configSchema>) {\n    super(config)\n    const twoBitOpts = {\n      filehandle: openLocation(readConfObject(config, 'twoBitLocation')),\n    }\n\n    this.twobit = new TwoBitFile(twoBitOpts)\n  }\n\n  public getRefNames() {\n    return this.twobit.getSequenceNames()\n  }\n\n  public async getRegions(): Promise<NoAssemblyRegion[]> {\n    const refSizes = await this.twobit.getSequenceSizes()\n    return Object.keys(refSizes).map(\n      (refName: string): NoAssemblyRegion => ({\n        refName,\n        start: 0,\n        end: refSizes[refName],\n      }),\n    )\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.twobit.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const seq: string = await this.twobit.getSequence(\n        refName,\n        start,\n        regionEnd,\n      )\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}