{"version":3,"sources":["../../../plugins/sequence/src/GCContentAdapter/GCContentAdapter.ts"],"names":["windowSize","windowDelta","gcMode","sequenceAdapter","readConfObject","this","config","getSubAdapter","dataAdapter","Error","configure","getRefNames","query","opts","ObservableCreate","observer","a","hw","f","queryStart","start","queryEnd","end","Math","max","complete","ret","getFeatures","pipe","toArray","toPromise","feat","residues","get","i","length","r","slice","nc","ng","len","j","pos","score","next","SimpleFeature","uniqueId","id","BaseFeatureDataAdapter","capabilities"],"mappings":"6eAWUA,WAAa,I,EAEbC,YAAc,I,EAEdC,OAAS,U,qLAMTC,EAAkBC,yBAAeC,KAAKC,OAAQ,mB,mBAE1BD,KAAKE,qB,aAAL,OAAAF,KAAqBF,G,UAAzCK,E,6BAEE,IAAIC,MAAM,4B,gCAEXD,EAAYA,a,0QAIWH,KAAKK,Y,cAA7BP,E,yBACCA,EAAgBQ,e,wIAQNC,EAAeC,GAAmB,WAInD,OAHAR,KAAKL,WAAa,IAClBK,KAAKJ,YAAc,IACnBI,KAAKH,OAAS,UACPY,2BAAgB,uCAAU,WAAMC,GAAN,iDAAAC,EAAA,sEACD,EAAKN,YADJ,UACzBP,EADyB,OAEzBc,EAAyB,IAApB,EAAKjB,WAAmB,EAAI,EAAKA,WAAa,EACnDkB,EAAwB,IAApB,EAAKlB,WAEFmB,EAA8BP,EAArCQ,MAAwBC,EAAaT,EAAlBU,IACzBH,EAAaI,KAAKC,IAAI,EAAGL,EAAaF,MACtCI,GAAYJ,GAEG,GAAKE,EAAaE,GATF,wBAU7BN,EAASU,WAVoB,kCAczBC,EAAMvB,EAAgBwB,YAAhB,2BACLf,GADK,IACEQ,MAAOD,EAAYG,IAAKD,IACpCR,GAhB6B,UAkBVa,EAAIE,KAAKC,eAAWC,YAlBV,QAqB/B,IArB+B,4BAkBxBC,EAlBwB,KAmBzBC,EAAWD,EAAKE,IAAI,OAEjBC,EAAIjB,EAAIiB,EAAIF,EAASG,OAASlB,EAAIiB,GAAK,EAAKjC,YAAa,CAKhE,IAJMmC,EAAIlB,EAAIc,EAASE,GAAKF,EAASK,MAAMH,EAAIjB,EAAIiB,EAAIjB,GACnDqB,EAAK,EACLC,EAAK,EACLC,EAAM,EACDC,EAAI,EAAGA,EAAIL,EAAED,OAAQM,IACf,MAATL,EAAEK,IAAuB,MAATL,EAAEK,GACpBH,IACkB,MAATF,EAAEK,IAAuB,MAATL,EAAEK,IAC3BF,IAEW,MAATH,EAAEK,IACJD,IAGEE,EAAMvB,EACRwB,OAhB4D,EAiB5C,YAAhB,EAAKzC,OACPyC,GAASJ,EAAKD,IAAOE,GAAO,GACH,SAAhB,EAAKtC,SACdyC,GAASJ,EAAKD,IAAOC,EAAKD,GAAM,IAIlCvB,EAAS6B,KACP,IAAIC,IAAc,CAChBC,SAAU,GAAF,OAAK,EAAKC,GAAV,YAAgBL,EAAMR,GAC9Bd,MAAOsB,EAAMR,EACbZ,IAAKoB,EAAMR,EAAI,EAAKjC,YACpB0C,WAKN5B,EAASU,WAvDsB,4CAAV,yD,8CAlCEuB,0B,EAObC,aAAe,CAAC","file":"static/js/70.cbb0b6a8.chunk.js","sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { toArray } from 'rxjs/operators'\n\nexport default class extends BaseFeatureDataAdapter {\n  private windowSize = 1000\n\n  private windowDelta = 1000\n\n  private gcMode = 'content'\n\n  public static capabilities = ['hasLocalStats']\n\n  public async configure() {\n    // instantiate the sequence adapter\n    const sequenceAdapter = readConfObject(this.config, 'sequenceAdapter')\n\n    const dataAdapter = await this.getSubAdapter?.(sequenceAdapter)\n    if (!dataAdapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return dataAdapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames() {\n    const sequenceAdapter = await this.configure()\n    return sequenceAdapter.getRefNames()\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures(query: Region, opts: BaseOptions) {\n    this.windowSize = 1000\n    this.windowDelta = 1000\n    this.gcMode = 'content'\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const hw = this.windowSize === 1 ? 1 : this.windowSize / 2 // Half the window size\n      const f = this.windowSize === 1\n\n      let { start: queryStart, end: queryEnd } = query\n      queryStart = Math.max(0, queryStart - hw)\n      queryEnd += hw\n\n      if (queryEnd < 0 || queryStart > queryEnd) {\n        observer.complete()\n        return\n      }\n\n      const ret = sequenceAdapter.getFeatures(\n        { ...query, start: queryStart, end: queryEnd },\n        opts,\n      )\n      const [feat] = await ret.pipe(toArray()).toPromise()\n      const residues = feat.get('seq')\n\n      for (let i = hw; i < residues.length - hw; i += this.windowDelta) {\n        const r = f ? residues[i] : residues.slice(i - hw, i + hw)\n        let nc = 0\n        let ng = 0\n        let len = 0\n        for (let j = 0; j < r.length; j++) {\n          if (r[j] === 'c' || r[j] === 'C') {\n            nc++\n          } else if (r[j] === 'g' || r[j] === 'G') {\n            ng++\n          }\n          if (r[j] !== 'N') {\n            len++\n          }\n        }\n        const pos = queryStart\n        let score\n        if (this.gcMode === 'content') {\n          score = (ng + nc) / (len || 1)\n        } else if (this.gcMode === 'skew') {\n          score = (ng - nc) / (ng + nc || 1)\n        }\n\n        // if (r[Math.floor(r.length / 2)] !== 'N') {\n        observer.next(\n          new SimpleFeature({\n            uniqueId: `${this.id}_${pos + i}`,\n            start: pos + i,\n            end: pos + i + this.windowDelta,\n            score,\n          }),\n        )\n        // }\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}