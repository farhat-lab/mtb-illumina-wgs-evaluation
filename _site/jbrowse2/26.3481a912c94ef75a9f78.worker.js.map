{"version":3,"sources":["../../../node_modules/@material-ui/icons/Create.js","../../../node_modules/@material-ui/icons/ArrowBackIos.js","../../../plugins/data-management/src/AssemblyManager/AssemblyTable.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyAddForm.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyEditor.tsx","../../../plugins/data-management/src/AssemblyManager/AssemblyManager.tsx"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useStyles","makeStyles","table","minWidth","minHeight","buttonCell","padding","button","display","AssemblyTable","observer","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","classes","rows","jbrowse","assemblies","map","assembly","name","readConfObject","aliases","TableRow","key","TableCell","toString","className","IconButton","data-testid","onClick","color","removeAssemblyConf","removeAssembly","TableContainer","component","Paper","Table","TableHead","Typography","variant","TableBody","theme","createStyles","root","flexGrow","overflow","spacing","paper","maxWidth","margin","createButton","marginTop","justifyContent","paperContent","flex","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","Grid","container","item","FileSelector","location","setLocation","loc","AssemblyAddForm","setFormOpen","useState","assemblyName","setAssemblyName","uri","id","inputProps","Button","startIcon","newAssembly","session","notify","sequence","adapter","type","addAssemblyConf","AssemblyEditor","model","titleBox","backgroundColor","palette","primary","main","textAlign","dialogContent","width","backButton","position","left","top","closeButton","right","grey","AssemblyManager","open","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","DialogTitle","aria-label","undefined","returnAssemblyName","DialogContent","DialogActions"],"mappings":"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","file":"26.3481a912c94ef75a9f78.worker.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Create');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11.67 3.87L9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z\"\n}), 'ArrowBackIos');\n\nexports.default = _default;","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { IconButton } from '@material-ui/core'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport CreateIcon from '@material-ui/icons/Create'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\n// local\nimport { readConfObject } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles(() => ({\n  table: {\n    minWidth: 500,\n    minHeight: 150,\n  },\n  buttonCell: {\n    padding: 3,\n  },\n  button: {\n    display: 'inline-block',\n    padding: 3,\n    minHeight: 0,\n    minWidth: 0,\n  },\n}))\n\nconst AssemblyTable = observer(\n  ({\n    rootModel,\n    setIsAssemblyBeingEdited,\n    setAssemblyBeingEdited,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    setIsAssemblyBeingEdited(arg: boolean): void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setAssemblyBeingEdited(arg: any): void\n  }) => {\n    const classes = useStyles()\n\n    function removeAssembly(name: string) {\n      rootModel.jbrowse.removeAssemblyConf(name)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const rows = rootModel.jbrowse.assemblies.map((assembly: any) => {\n      const name = readConfObject(assembly, 'name')\n      const aliases = readConfObject(assembly, 'aliases')\n      return (\n        <TableRow key={name}>\n          <TableCell>{name}</TableCell>\n          <TableCell>{aliases ? aliases.toString() : ''}</TableCell>\n          <TableCell className={classes.buttonCell}>\n            <IconButton\n              data-testid={`${name}-edit`}\n              className={classes.button}\n              onClick={() => {\n                setIsAssemblyBeingEdited(true)\n                setAssemblyBeingEdited(assembly)\n              }}\n            >\n              <CreateIcon color=\"primary\" />\n            </IconButton>\n            <IconButton\n              data-testid={`${name}-delete`}\n              className={classes.button}\n              onClick={() => {\n                removeAssembly(name)\n              }}\n            >\n              <DeleteIcon color=\"error\" />\n            </IconButton>\n          </TableCell>\n        </TableRow>\n      )\n    })\n\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant=\"h5\">Name</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Aliases</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"h5\">Actions</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    )\n  },\n)\n\nexport default AssemblyTable\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport FileSelector from '@jbrowse/core/ui/FileSelector'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport {\n  Button,\n  Grid,\n  MenuItem,\n  Paper,\n  TextField,\n  Theme,\n  makeStyles,\n  createStyles,\n} from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      padding: theme.spacing(0, 3),\n    },\n    paper: {\n      maxWidth: 400,\n      margin: `${theme.spacing(1)}px auto`,\n      padding: theme.spacing(2),\n    },\n    createButton: {\n      marginTop: '1em',\n      justifyContent: 'center',\n    },\n    paperContent: {\n      flex: 'auto',\n      margin: `${theme.spacing(1)}px auto`,\n      padding: theme.spacing(1),\n      overflow: 'auto',\n    },\n  }),\n)\n\nconst AdapterSelector = observer(\n  ({\n    adapterSelection,\n    setAdapterSelection,\n    adapterTypes,\n  }: {\n    adapterSelection: string\n    setAdapterSelection: Function\n    adapterTypes: Array<string>\n  }) => {\n    return (\n      <TextField\n        value={adapterSelection}\n        label=\"Type\"\n        select\n        helperText=\"Type of adapter to use\"\n        fullWidth\n        onChange={event => {\n          setAdapterSelection(event.target.value)\n        }}\n      >\n        {adapterTypes.map(str => (\n          <MenuItem key={str} value={str}>\n            {str}\n          </MenuItem>\n        ))}\n      </TextField>\n    )\n  },\n)\n\nconst AdapterInput = observer(\n  ({\n    adapterSelection,\n    fastaLocation,\n    setFastaLocation,\n    faiLocation,\n    setFaiLocation,\n    gziLocation,\n    setGziLocation,\n    twoBitLocation,\n    setTwoBitLocation,\n  }: {\n    adapterSelection: string\n    fastaLocation: FileLocation\n    setFastaLocation: Function\n    faiLocation: FileLocation\n    setFaiLocation: Function\n    gziLocation: FileLocation\n    setGziLocation: Function\n    twoBitLocation: FileLocation\n    setTwoBitLocation: Function\n  }) => {\n    if (\n      adapterSelection === 'IndexedFastaAdapter' ||\n      adapterSelection === 'BgzipFastaAdapter'\n    ) {\n      return (\n        <Grid container spacing={2}>\n          <Grid item>\n            <FileSelector\n              name=\"fastaLocation\"\n              location={fastaLocation}\n              setLocation={loc => setFastaLocation(loc)}\n            />\n          </Grid>\n          <Grid item>\n            <FileSelector\n              name=\"faiLocation\"\n              location={faiLocation}\n              setLocation={loc => setFaiLocation(loc)}\n            />\n          </Grid>\n          {adapterSelection === 'BgzipFastaAdapter' ? (\n            <Grid item>\n              <FileSelector\n                name=\"gziLocation\"\n                location={gziLocation}\n                setLocation={loc => setGziLocation(loc)}\n              />\n            </Grid>\n          ) : null}\n        </Grid>\n      )\n    }\n\n    if (adapterSelection === 'TwoBitAdapter') {\n      return (\n        <FileSelector\n          name=\"twoBitLocation\"\n          location={twoBitLocation}\n          setLocation={loc => setTwoBitLocation(loc)}\n        />\n      )\n    }\n\n    return null\n  },\n)\n\nconst AssemblyAddForm = observer(\n  ({\n    rootModel,\n    setFormOpen,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    setFormOpen: Function\n  }) => {\n    const classes = useStyles()\n\n    const adapterTypes = [\n      'IndexedFastaAdapter',\n      'BgzipFastaAdapter',\n      'TwoBitAdapter',\n    ]\n\n    const [assemblyName, setAssemblyName] = useState('')\n    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0])\n    const [fastaLocation, setFastaLocation] = useState({ uri: '' })\n    const [faiLocation, setFaiLocation] = useState({ uri: '' })\n    const [gziLocation, setGziLocation] = useState({ uri: '' })\n    const [twoBitLocation, setTwoBitLocation] = useState({ uri: '' })\n\n    function createAssembly() {\n      if (assemblyName === '') {\n        rootModel.session.notify(\"Can't create an assembly without a name\")\n      } else {\n        setFormOpen(false)\n        // setIsAssemblyBeingEdited(true)\n        let newAssembly\n        if (adapterSelection === 'IndexedFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            sequence: {\n              adapter: {\n                type: 'IndexedFastaAdapter',\n                fastaLocation,\n                faiLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'BgzipFastaAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            sequence: {\n              adapter: {\n                type: 'BgzipFastaAdapter',\n                fastaLocation,\n                faiLocation,\n                gziLocation,\n              },\n            },\n          }\n        } else if (adapterSelection === 'TwoBitAdapter') {\n          newAssembly = {\n            name: assemblyName,\n            sequence: {\n              adapter: {\n                type: 'TwoBitAdapter',\n                twoBitLocation,\n              },\n            },\n          }\n        }\n        rootModel.jbrowse.addAssemblyConf(newAssembly)\n        rootModel.session.notify(\n          `Successfully added ${assemblyName} assembly to JBrowse 2`,\n          'success',\n        )\n      }\n    }\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <TextField\n            id=\"assembly-name\"\n            inputProps={{ 'data-testid': 'assembly-name' }}\n            label=\"Assembly Name\"\n            variant=\"outlined\"\n            value={assemblyName}\n            onChange={event => setAssemblyName(event.target.value)}\n          />\n          <AdapterSelector\n            adapterSelection={adapterSelection}\n            setAdapterSelection={setAdapterSelection}\n            adapterTypes={adapterTypes}\n          />\n          <div className={classes.paperContent}>\n            <AdapterInput\n              adapterSelection={adapterSelection}\n              fastaLocation={fastaLocation}\n              setFastaLocation={setFastaLocation}\n              faiLocation={faiLocation}\n              setFaiLocation={setFaiLocation}\n              gziLocation={gziLocation}\n              setGziLocation={setGziLocation}\n              twoBitLocation={twoBitLocation}\n              setTwoBitLocation={setTwoBitLocation}\n            />\n          </div>\n        </Paper>\n        <Grid container className={classes.createButton}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<AddIcon />}\n              onClick={createAssembly}\n            >\n              Create new assembly\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  },\n)\n\nexport default AssemblyAddForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\n\nconst AssemblyEditor = observer(\n  ({\n    assembly,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assembly: any\n  }) => {\n    return <ConfigurationEditor model={{ target: assembly }} />\n  },\n)\n\nexport default AssemblyEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport AddIcon from '@material-ui/icons/Add'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { IconButton } from '@material-ui/core/'\n\nimport AssemblyTable from './AssemblyTable'\nimport AssemblyAddForm from './AssemblyAddForm'\nimport AssemblyEditor from './AssemblyEditor'\n\nconst useStyles = makeStyles(theme => ({\n  titleBox: {\n    color: '#fff',\n    backgroundColor: theme.palette.primary.main,\n    textAlign: 'center',\n  },\n  dialogContent: {\n    width: '100%',\n  },\n  backButton: {\n    color: '#fff',\n    position: 'absolute',\n    left: theme.spacing(4),\n    top: theme.spacing(4),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nconst AssemblyManager = observer(\n  ({\n    rootModel,\n    open,\n    onClose,\n  }: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    rootModel: any\n    open: boolean\n    onClose: (arg: boolean) => void\n  }) => {\n    const classes = useStyles()\n    const [isFormOpen, setFormOpen] = useState(false)\n    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false)\n    const [assemblyBeingEdited, setAssemblyBeingEdited] = useState()\n\n    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited\n\n    return (\n      <Dialog open={open} onClose={() => onClose(false)}>\n        <DialogTitle className={classes.titleBox}>\n          {showAssemblyTable ? 'Assembly manager' : null}\n          {isFormOpen ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setFormOpen(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              Add new assembly\n            </>\n          ) : null}\n          {isAssemblyBeingEdited ? (\n            <>\n              <IconButton\n                aria-label=\"back\"\n                className={classes.backButton}\n                onClick={() => setIsAssemblyBeingEdited(false)}\n              >\n                <ArrowBackIosIcon />\n              </IconButton>\n              {returnAssemblyName(assemblyBeingEdited)}\n            </>\n          ) : null}\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={() => onClose(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <div className={classes.dialogContent}>\n            {showAssemblyTable ? (\n              <AssemblyTable\n                rootModel={rootModel}\n                setIsAssemblyBeingEdited={setIsAssemblyBeingEdited}\n                setAssemblyBeingEdited={setAssemblyBeingEdited}\n              />\n            ) : null}\n            {isAssemblyBeingEdited ? (\n              <AssemblyEditor assembly={assemblyBeingEdited} />\n            ) : null}\n            {isFormOpen ? (\n              <AssemblyAddForm\n                rootModel={rootModel}\n                setFormOpen={setFormOpen}\n              />\n            ) : null}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          {showAssemblyTable ? (\n            <>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => onClose(false)}\n              >\n                Close\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                startIcon={<AddIcon />}\n                onClick={() => setFormOpen(true)}\n              >\n                Add new assembly\n              </Button>\n            </>\n          ) : null}\n        </DialogActions>\n      </Dialog>\n    )\n  },\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction returnAssemblyName(assembly: any) {\n  if (assembly !== undefined) {\n    return assembly.name\n  }\n  return null\n}\n\nexport default AssemblyManager\n"],"sourceRoot":""}