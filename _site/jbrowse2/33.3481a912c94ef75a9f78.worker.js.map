{"version":3,"sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"names":["omit","AlignmentFlags","props","classes","useStyles","flags","feature","title","style","display","className","fieldName","fieldValue","map","name","index","val","key","type","checked","Boolean","id","readOnly","htmlFor","Formatter","value","useState","show","setShow","String","length","onClick","copy","slice","SupplementaryAlignments","tag","model","session","getSession","split","filter","SA","saRef","saStart","saStrand","saLength","cigar","cigarOps","parseCigar","lengthOnRef","i","len","op","getLengthOnRef","extra","Math","floor","start","end","locString","max","displayString","view","navToLocString","notify","href","PairLink","observer","feat","JSON","parse","stringify","featureData","tags","data-testid","formatter"],"mappings":"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","file":"33.3481a912c94ef75a9f78.worker.js","sourcesContent":["import { Typography, Link, Paper } from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport React, { useState } from 'react'\nimport copy from 'copy-to-clipboard'\nimport {\n  FeatureDetails,\n  BaseCard,\n  useStyles,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { parseCigar } from '../BamAdapter/MismatchParser'\n\nconst omit = ['clipPos', 'flags']\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFlags(props: { feature: any }) {\n  const classes = useStyles()\n  const { feature } = props\n  const { flags } = feature\n  const flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n  ]\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <div style={{ display: 'flex' }}>\n        <div className={classes.fieldName}>Flag</div>\n        <div className={classes.fieldValue}>{flags}</div>\n      </div>\n      {flagNames.map((name, index) => {\n        // eslint-disable-next-line no-bitwise\n        const val = flags & (1 << index)\n        const key = `${name}_${val}`\n        return (\n          <div key={key}>\n            <input type=\"checkbox\" checked={Boolean(val)} id={key} readOnly />\n            <label htmlFor={key}>{name}</label>\n          </div>\n        )\n      })}\n    </BaseCard>\n  )\n}\n\nfunction Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const display = String(value)\n  if (display.length > 100) {\n    return (\n      <>\n        <button type=\"button\" onClick={() => copy(display)}>\n          Copy\n        </button>\n        <button type=\"button\" onClick={() => setShow(val => !val)}>\n          {show ? 'Show less' : 'Show more'}\n        </button>\n        <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n      </>\n    )\n  }\n  return <div>{display}</div>\n}\n\n// utility function to get length of alignment from cigar\nfunction getLengthOnRef(cigar: string) {\n  const cigarOps = parseCigar(cigar)\n  let lengthOnRef = 0\n  for (let i = 0; i < cigarOps.length; i += 2) {\n    const len = +cigarOps[i]\n    const op = cigarOps[i + 1]\n    if (op !== 'H' && op !== 'S' && op !== 'I') {\n      lengthOnRef += len\n    }\n  }\n  return lengthOnRef\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction SupplementaryAlignments(props: { tag: string; model: any }) {\n  const { tag, model } = props\n  const session = getSession(model)\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, index) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart\n            const end = +saStart + saLength\n            const locString = `${saRef}:${Math.max(1, start - extra)}-${\n              end + extra\n            }`\n            const displayString = `${saRef}:${start}-${end} (${saStrand})`\n            return (\n              <li key={`${locString}-${index}`}>\n                <Link\n                  onClick={() => {\n                    const { view } = model\n                    if (view) {\n                      view.navToLocString(locString)\n                    } else {\n                      session.notify(\n                        'No view associated with this feature detail panel anymore',\n                        'warning',\n                      )\n                    }\n                  }}\n                  href=\"#\"\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </BaseCard>\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction PairLink({ locString, model }: { locString: string; model: any }) {\n  const session = getSession(model)\n  return (\n    <Link\n      onClick={() => {\n        const { view } = model\n        if (view) {\n          view.navToLocString(locString)\n        } else {\n          session.notify(\n            'No view associated with this feature detail panel anymore',\n            'warning',\n          )\n        }\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction AlignmentFeatureDetails(props: { model: any }) {\n  const { model } = props\n  const feat = JSON.parse(JSON.stringify(model.featureData))\n  const SA = (feat.tags && feat.tags.SA) || feat.SA\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        omit={omit}\n        feature={feat}\n        formatter={(value: unknown, key: string) => {\n          return key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }}\n      />\n      {SA ? <SupplementaryAlignments model={model} tag={SA} /> : null}\n      <AlignmentFlags feature={feat} {...props} />\n    </Paper>\n  )\n}\n\nexport default observer(AlignmentFeatureDetails)\n"],"sourceRoot":""}