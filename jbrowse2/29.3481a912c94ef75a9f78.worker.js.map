{"version":3,"sources":["../../../node_modules/@material-ui/icons/Email.js","../../../plugins/trackhub-registry/src/trackhub-registry/HubDetails.js","../../../plugins/trackhub-registry/src/trackhub-registry/SelectBox.js","../../../plugins/trackhub-registry/src/trackhub-registry/TrackHubRegistrySelect.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","props","useState","hubFile","setHubFile","errorMessage","setErrorMessage","hub","hubUrl","longLabel","shortLabel","useEffect","a","hubHandle","openLocation","uri","hubTxt","newHubFile","error","getHubTxt","color","title","__dangerouslySetInnerHTML","DOMPurify","href","rel","target","URL","variant","useStyles","makeStyles","theme","formControl","minWidth","marginLeft","marginRight","selectList","selectedItem","handleSelect","label","helpText","classes","className","onChange","item","description","key","QueryStatus","status","Wire","children","hubList","maxHeight","overflowY","genomeSelector","marginTop","model","setModelReady","assemblies","setAssemblies","selectedSpecies","setSelectedSpecies","selectedAssembly","setSelectedAssembly","hubs","setHubs","allHubsRetrieved","setAllHubsRetrieved","selectedHub","setSelectedHub","newHubs","reset","Map","page","Math","doPost","entries_per_page","body","JSON","assembly","signal","response","url","params","options","urlParams","param","fetch","rawResponse","isAbortException","method","controller","doGet","pingResponse","assembliesResponse","getAssemblies","getHubs","renderItems","speciesList","event","ret","s","newHub","Array","id","formControlProps","html","placement","interactive","disabled","Boolean","control"],"mappings":"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","file":"29.3481a912c94ef75a9f78.worker.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"\n}), 'Email');\n\nexports.default = _default;","import { openLocation } from '@jbrowse/core/util/io'\nimport { HubFile } from '@gmod/ucsc-hub'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Typography from '@material-ui/core/Typography'\nimport EmailIcon from '@material-ui/icons/Email'\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew'\nimport PropTypes from 'prop-types'\nimport DOMPurify from 'dompurify'\nimport React, { useEffect, useState } from 'react'\n\nfunction HubDetails(props) {\n  const [hubFile, setHubFile] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const { hub } = props\n\n  const { url: hubUrl, longLabel, shortLabel } = hub\n\n  useEffect(() => {\n    async function getHubTxt() {\n      let hubTxt\n      try {\n        const hubHandle = openLocation({ uri: hubUrl })\n        hubTxt = await hubHandle.readFile('utf8')\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Error retrieving hub</strong> {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n        return\n      }\n      try {\n        const newHubFile = new HubFile(hubTxt)\n        setHubFile(newHubFile)\n      } catch (error) {\n        setErrorMessage(\n          <span>\n            <strong>Could not parse genomes file:</strong> <br />\n            {error.message} <br />\n            {hubUrl}\n          </span>,\n        )\n      }\n    }\n\n    getHubTxt()\n  }, [hubUrl])\n  if (errorMessage) {\n    return (\n      <Card>\n        <CardContent>\n          <Typography color=\"error\">{errorMessage}</Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n  if (hubFile) {\n    return (\n      <Card>\n        <CardHeader title={shortLabel} />\n        <CardContent>\n          <div __dangerouslySetInnerHTML={DOMPurify.sanitize(longLabel)} />\n        </CardContent>\n        <CardActions>\n          <IconButton\n            href={`mailto:${hubFile.get('email')}`}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            color=\"secondary\"\n          >\n            <EmailIcon />\n          </IconButton>\n          {hubFile.get('descriptionUrl') ? (\n            <IconButton\n              href={\n                new URL(hubFile.get('descriptionUrl'), new URL(hubUrl)).href\n              }\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <OpenInNewIcon color=\"secondary\" />\n            </IconButton>\n          ) : null}\n        </CardActions>\n      </Card>\n    )\n  }\n  return <LinearProgress variant=\"query\" />\n}\n\nHubDetails.propTypes = {\n  hub: PropTypes.shape().isRequired,\n}\n\nexport default HubDetails\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 192,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}))\n\nfunction SelectBox({\n  selectList,\n  selectedItem,\n  handleSelect,\n  label,\n  helpText,\n}) {\n  const classes = useStyles()\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel>{label}</InputLabel>\n      <Select value={selectedItem} onChange={handleSelect}>\n        {selectList.map(item => {\n          let value\n          let description\n          if (item.name) {\n            value = item.name\n            description = `${item.name} (${item.synonyms.join(' ')})`\n          }\n          return (\n            <MenuItem key={description || item} value={value || item}>\n              {description || item}\n            </MenuItem>\n          )\n        })}\n      </Select>\n      <FormHelperText>{selectedItem ? '' : helpText}</FormHelperText>\n    </FormControl>\n  )\n}\n\nSelectBox.propTypes = {\n  selectList: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),\n  ).isRequired,\n  selectedItem: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  helpText: PropTypes.string.isRequired,\n}\n\nexport default SelectBox\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport {\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  LinearProgress,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { isAbortException } from '@jbrowse/core/util'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport PropTypes from 'prop-types'\nimport HubDetails from './HubDetails'\nimport SelectBox from './SelectBox'\n\nfunction QueryStatus(props) {\n  const { status } = props\n  return (\n    <>\n      <LinearProgress variant=\"query\" />\n      <Typography>{status}</Typography>\n    </>\n  )\n}\n\nQueryStatus.propTypes = {\n  status: PropTypes.string.isRequired,\n}\n\n// Need this for FormControlLabel to work with Tooltip\n// https://github.com/mui-org/material-ui/issues/2225#issuecomment-460041878\nfunction Wire({ children, ...props }) {\n  return children(props)\n}\n\nconst useStyles = makeStyles(theme => ({\n  hubList: {\n    maxHeight: 400,\n    overflowY: 'auto',\n  },\n  genomeSelector: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nfunction TrackHubRegistrySelect({ model, setModelReady }) {\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [assemblies, setAssemblies] = useState(null)\n  const [selectedSpecies, setSelectedSpecies] = useState('')\n  const [selectedAssembly, setSelectedAssembly] = useState('')\n  const [hubs, setHubs] = useState(new Map())\n  const [allHubsRetrieved, setAllHubsRetrieved] = useState(false)\n  const [selectedHub, setSelectedHub] = useState('')\n  const classes = useStyles()\n\n  useEffect(() => {\n    if (selectedHub) setModelReady(true)\n    else setModelReady(false)\n  }, [selectedHub, setModelReady])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    async function getAssemblies() {\n      const pingResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/ping',\n        undefined,\n        { signal },\n      )\n      if (!pingResponse) {\n        return\n      }\n      if (pingResponse.ping !== 1) {\n        setErrorMessage('Registry is not available')\n        return\n      }\n      const assembliesResponse = await doGet(\n        'https://www.trackhubregistry.org/api/info/assemblies',\n        undefined,\n        { signal },\n      )\n      if (assembliesResponse) {\n        setAssemblies(assembliesResponse)\n      }\n    }\n\n    getAssemblies()\n\n    return () => {\n      controller.abort()\n    }\n  }, [])\n\n  useEffect(() => {\n    const controller = new AbortController()\n    const { signal } = controller\n    if (!errorMessage) {\n      if (selectedAssembly && !hubs.size) getHubs(signal, true)\n      else if (hubs.size && !allHubsRetrieved) getHubs(signal)\n    }\n\n    return () => {\n      controller.abort()\n    }\n  })\n\n  async function getHubs(signal, reset) {\n    const entriesPerPage = 10\n    const newHubs = reset ? new Map() : new Map(hubs)\n    const page = Math.floor(hubs.size / entriesPerPage) + 1\n    const response = await doPost(\n      'https://www.trackhubregistry.org/api/search',\n      { page, entries_per_page: entriesPerPage },\n      { body: JSON.stringify({ assembly: selectedAssembly }), signal },\n    )\n    if (response) {\n      for (const item of response.items) {\n        if (item.hub.url.startsWith('ftp://')) {\n          item.error = 'JBrowse cannot add connections from FTP sources'\n        } else {\n          const hub = openLocation({ uri: item.hub.url })\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            await hub.stat()\n          } catch (error) {\n            item.error = error.message\n          }\n        }\n        newHubs.set(item.id, item)\n      }\n      setHubs(newHubs)\n      if (newHubs.size === response.total_entries) setAllHubsRetrieved(true)\n    }\n  }\n\n  function handleSelectSpecies(event) {\n    setSelectedSpecies(event.target.value)\n    setSelectedAssembly('')\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectAssembly(event) {\n    setSelectedAssembly(event.target.value)\n    setHubs(new Map())\n    setSelectedHub('')\n    setAllHubsRetrieved(false)\n  }\n\n  function handleSelectHub(event) {\n    const newHub = event.target.value\n    setSelectedHub(newHub)\n    model.target.name.set(hubs.get(newHub).hub.shortLabel)\n    model.target.assemblyNames.set([selectedAssembly])\n    model.target.trackDbId.set(newHub)\n  }\n\n  async function doGet(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(\n        `${url}${urlParams ? `?${urlParams}` : ''}`,\n        options,\n      )\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  async function doPost(url, params = {}, options = {}) {\n    let rawResponse\n    const urlParams = Object.keys(params)\n      .map(param => `${param}=${params[param]}`)\n      .join(';')\n    try {\n      rawResponse = await fetch(`${url}${urlParams ? `?${urlParams}` : ''}`, {\n        ...options,\n        method: 'POST',\n      })\n    } catch (error) {\n      if (!isAbortException(error)) {\n        setErrorMessage(\n          <span>\n            <strong>Network connection error.</strong> <br />\n            {error.message} <br />\n            {url}\n          </span>,\n        )\n      }\n      return null\n    }\n    if (!rawResponse.ok) {\n      setErrorMessage(\n        <span>\n          <strong>Error connecting to the URL.</strong> <br />\n          {rawResponse.status}: {rawResponse.statusText} <br />\n          {url}\n        </span>,\n      )\n      return null\n    }\n    return rawResponse.json()\n  }\n\n  const renderItems = [\n    <Typography key=\"heading\" variant=\"h6\">\n      The Track Hub Registry\n    </Typography>,\n  ]\n\n  if (errorMessage) {\n    renderItems.push(\n      <Typography key=\"errorMessage\" color=\"error\">\n        {errorMessage}\n      </Typography>,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  if (!assemblies) {\n    renderItems.push(\n      <QueryStatus key=\"queryStatus\" status=\"Connecting to registry...\" />,\n    )\n    return <div>{renderItems}</div>\n  }\n\n  const speciesList = Object.keys(assemblies)\n    .sort()\n    .filter(item => item.toLowerCase().includes('sapiens'))\n\n  renderItems.push(\n    <SelectBox\n      key=\"speciesSelect\"\n      selectList={speciesList}\n      selectedItem={selectedSpecies}\n      handleSelect={handleSelectSpecies}\n      label=\"Species\"\n      helpText=\"Select a species\"\n    />,\n  )\n\n  if (selectedSpecies) {\n    const ret = assemblies[selectedSpecies].filter(\n      s => !(s.name === 'GRCh37' && s.synonyms[0] === 'hg38'),\n    )\n    renderItems.push(\n      <SelectBox\n        key=\"assemblySelect\"\n        selectList={ret}\n        selectedItem={selectedAssembly}\n        handleSelect={handleSelectAssembly}\n        label=\"Assembly\"\n        helpText=\"Select an assembly\"\n      />,\n    )\n  }\n\n  if (selectedAssembly) {\n    renderItems.push(\n      <div key=\"hubSelect\">\n        <FormControl>\n          <FormLabel>Hubs:</FormLabel>\n          <div className={classes.hubList}>\n            <RadioGroup value={selectedHub} onChange={handleSelectHub}>\n              {Array.from(hubs.values())\n                .filter(\n                  hub =>\n                    hub.assembly.name === selectedAssembly ||\n                    hub.assembly.synonyms.includes(selectedAssembly),\n                )\n                .map(hub => {\n                  const {\n                    error,\n                    id,\n                    hub: { shortLabel, longLabel },\n                  } = hub\n                  return (\n                    <Wire key={id} value={id}>\n                      {formControlProps => (\n                        <Tooltip\n                          title={error || <SanitizedHTML html={longLabel} />}\n                          placement=\"left\"\n                          interactive\n                        >\n                          <FormControlLabel\n                            key={id}\n                            value={id}\n                            label={<SanitizedHTML html={shortLabel} />}\n                            disabled={Boolean(error)}\n                            control={<Radio />}\n                            {...formControlProps}\n                          />\n                        </Tooltip>\n                      )}\n                    </Wire>\n                  )\n                })}\n            </RadioGroup>\n          </div>\n        </FormControl>\n      </div>,\n    )\n    if (!allHubsRetrieved) {\n      renderItems.push(<QueryStatus key=\"hubStatus\" status=\"Retrieving hubs\" />)\n    }\n  }\n\n  if (selectedHub) {\n    renderItems.push(\n      <HubDetails key=\"hubDetails\" hub={hubs.get(selectedHub).hub} />,\n    )\n  }\n\n  return <>{renderItems}</>\n}\n\nexport default TrackHubRegistrySelect\n"],"sourceRoot":""}