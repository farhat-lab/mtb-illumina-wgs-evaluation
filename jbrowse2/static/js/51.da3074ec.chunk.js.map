{"version":3,"sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByTag.tsx"],"names":["useStyles","makeStyles","theme","root","width","closeButton","position","right","spacing","top","color","palette","grey","observer","props","classes","model","handleClose","useState","tag","setTag","validTag","match","open","onClose","aria-label","className","onClick","style","overflowX","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","data-testid","variant","marginLeft","setColorScheme","type","disabled"],"mappings":"iQAcMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,KAETC,YAAa,CACXC,SAAU,WACVC,MAAOL,EAAMM,QAAQ,GACrBC,IAAKP,EAAMM,QAAQ,GACnBE,MAAOR,EAAMS,QAAQC,KAAK,UAqEfC,8BAjEf,SAAuBC,GAIrB,IAAMC,EAAUf,IACRgB,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YAFd,EAGqBC,mBAAS,IAH9B,mBAGMC,EAHN,KAGWC,EAHX,KAIKC,EAAWF,EAAIG,MAAM,yBAE3B,OACE,kBAAC,IAAD,CAAQC,MAAI,EAACC,QAASP,GACpB,kBAAC,IAAD,oBAEE,kBAAC,IAAD,CACEQ,aAAW,QACXC,UAAWX,EAAQV,YACnBsB,QAASV,GAET,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAeW,MAAO,CAAEC,UAAW,WACjC,yBAAKH,UAAWX,EAAQZ,MACtB,kBAAC,IAAD,gCACA,kBAAC,IAAD,CAAYO,MAAM,iBAAlB,4IAKA,kBAAC,IAAD,CACEoB,MAAOX,EACPY,SAAU,SAAAC,GACRZ,EAAOY,EAAMC,OAAOH,QAEtBI,YAAY,iBACZC,WAAY,CACVC,UAAW,EACX,cAAe,wBAEjBC,MAAsB,IAAflB,EAAImB,SAAiBjB,EAC5BkB,WAA2B,IAAfpB,EAAImB,QAAiBjB,EAA+B,GAApB,kBAC5CmB,aAAa,MACbC,cAAY,mBAEd,kBAAC,IAAD,CACEC,QAAQ,YACRhC,MAAM,UACNkB,MAAO,CAAEe,WAAY,IACrBhB,QAAS,WACPX,EAAM4B,eAAe,CACnBC,KAAM,MACN1B,QAEFF,KAEF6B,UAAWzB,GAXb","file":"static/js/51.da3074ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  TextField,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction ColorByTagDlg(props: {\n  model: { setColorScheme: Function }\n  handleClose: () => void\n}) {\n  const classes = useStyles()\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/)\n\n  return (\n    <Dialog open onClose={handleClose}>\n      <DialogTitle>\n        Color by tag\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <div className={classes.root}>\n          <Typography>Enter tag to color by: </Typography>\n          <Typography color=\"textSecondary\">\n            Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case)\n            for minimap2 read strand, HP for haplotype, RG for read group, etc.\n          </Typography>\n\n          <TextField\n            value={tag}\n            onChange={event => {\n              setTag(event.target.value)\n            }}\n            placeholder=\"Enter tag name\"\n            inputProps={{\n              maxLength: 2,\n              'data-testid': 'color-tag-name-input',\n            }}\n            error={tag.length === 2 && !validTag}\n            helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n            autoComplete=\"off\"\n            data-testid=\"color-tag-name\"\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginLeft: 20 }}\n            onClick={() => {\n              model.setColorScheme({\n                type: 'tag',\n                tag,\n              })\n              handleClose()\n            }}\n            disabled={!validTag}\n          >\n            Submit\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default observer(ColorByTagDlg)\n"],"sourceRoot":""}