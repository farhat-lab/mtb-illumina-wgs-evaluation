{"version":3,"sources":["../../../plugins/sequence/src/ChromSizesAdapter/ChromSizesAdapter.ts"],"names":["config","refSeqs","source","chromSizesLocation","readConfObject","Error","file","openLocation","toString","init","readFile","data","length","split","forEach","line","name","this","Object","keys","map","refName","start","end","BaseAdapter"],"mappings":"wTAiBE,WAAmBA,GAAyC,2BAC1D,cAAMA,IALEC,aAIkD,IAFlDC,YAEkD,EAE1D,IAAMC,EAAqBC,yBAAeJ,EAAQ,sBAClD,IAAKG,EACH,MAAM,IAAIE,MAAM,mCAElB,IAAMC,EAAOC,uBAAaJ,GANgC,OAO1D,EAAKD,OAASI,EAAKE,WACnB,EAAKP,QAAU,EAAKQ,KAAKH,GARiC,E,0FAWzCA,G,yFACGA,EAAKI,SAAS,Q,UAA5BC,E,OACAV,EAAqC,GACtCU,EAAKC,O,sBACF,IAAIP,MAAJ,8BAAiCC,EAAKE,a,cAE9CG,EAAKE,MAAM,MAAMC,SAAQ,SAACC,GACxB,GAAIA,EAAKH,OAAQ,OACQG,EAAKF,MAAM,MADnB,mBACRG,EADQ,KACFJ,EADE,KAEfX,EAAQe,IAASJ,M,kBAGdX,G,qQAIegB,KAAKhB,Q,cAArBA,E,yBACCiB,OAAOC,KAAKlB,GAASmB,KAAI,SAAAC,GAAO,MAAK,CAC1CA,UACAC,MAAO,EACPC,IAAKtB,EAAQoB,Q,oJArCUG","file":"static/js/69.d6bbd967.chunk.js","sourcesContent":["import {\n  RegionsAdapter,\n  BaseAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Instance } from 'mobx-state-tree'\nimport MyConfigSchema from './configSchema'\n\nexport default class extends BaseAdapter implements RegionsAdapter {\n  // the map of refSeq to length\n  protected refSeqs: Promise<Record<string, number>>\n\n  protected source: string\n\n  public constructor(config: Instance<typeof MyConfigSchema>) {\n    super(config)\n    const chromSizesLocation = readConfObject(config, 'chromSizesLocation')\n    if (!chromSizesLocation) {\n      throw new Error('must provide chromSizesLocation')\n    }\n    const file = openLocation(chromSizesLocation as FileLocation)\n    this.source = file.toString()\n    this.refSeqs = this.init(file)\n  }\n\n  private async init(file: GenericFilehandle) {\n    const data = (await file.readFile('utf8')) as string\n    const refSeqs: { [key: string]: number } = {}\n    if (!data.length) {\n      throw new Error(`Could not read file ${file.toString()}`)\n    }\n    data.split('\\n').forEach((line: string) => {\n      if (line.length) {\n        const [name, length] = line.split('\\t')\n        refSeqs[name] = +length\n      }\n    })\n    return refSeqs\n  }\n\n  public async getRegions() {\n    const refSeqs = await this.refSeqs\n    return Object.keys(refSeqs).map(refName => ({\n      refName,\n      start: 0,\n      end: refSeqs[refName],\n    }))\n  }\n\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}