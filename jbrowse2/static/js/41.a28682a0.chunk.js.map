{"version":3,"sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/util.ts"],"names":["BigBedAdapter","config","bigbed","parser","bigBedLocation","readConfObject","BigBed","filehandle","openLocation","getHeader","then","autoSql","BED","Object","this","refsByName","keys","opts","version","fileType","fields","rest","f","fromEntries","map","name","comment","refId","refsByNumber","region","refName","start","end","signal","ObservableCreate","observer","a","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","undefined","Error","chromStart","chromEnd","chrom","SimpleFeature","id","get","ucscProcessedTranscript","subscribe","error","BaseFeatureDataAdapter","feature","children","thickStart","thickEnd","blocks","filter","child","sort","newChildren","forEach","block","prime","leftPrime","rightPrime","newData","tags","tag"],"mappings":"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","file":"static/js/41.a28682a0.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region, FileLocation } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Instance } from 'mobx-state-tree'\nimport configSchema from './configSchema'\nimport { ucscProcessedTranscript } from '../util'\n\ninterface BEDFeature {\n  chrom: string\n  chromStart: number\n  chromEnd: number\n  [key: string]: any\n}\n\ninterface Parser {\n  parseLine: (line: string, opts: { uniqueId: string | number }) => BEDFeature\n}\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private bigbed: BigBed\n\n  private parser: Promise<Parser>\n\n  public constructor(config: Instance<typeof configSchema>) {\n    super(config)\n    const bigBedLocation = readConfObject(\n      config,\n      'bigBedLocation',\n    ) as FileLocation\n    this.bigbed = new BigBed({\n      filehandle: openLocation(bigBedLocation),\n    })\n\n    this.parser = this.bigbed\n      .getHeader()\n      .then(({ autoSql }: { autoSql: string }) => new BED({ autoSql }))\n  }\n\n  public async getRefNames() {\n    return Object.keys((await this.bigbed.getHeader()).refsByName)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { version, fileType } = await this.bigbed.getHeader(opts)\n    // @ts-ignore\n    const { autoSql } = await this.parser\n    const { fields, ...rest } = autoSql\n    const f = Object.fromEntries(\n      // @ts-ignore\n      fields.map(({ name, comment }) => [name, comment]),\n    )\n    return { version, fileType, autoSql: { ...rest }, fields: f }\n  }\n\n  public async refIdToName(refId: number) {\n    return ((await this.bigbed.getHeader()).refsByNumber[refId] || {}).name\n  }\n\n  public getFeatures(region: Region, opts: BaseOptions = {}) {\n    const { refName, start, end } = region\n    const { signal } = opts\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const parser = await this.parser\n        const ob = await this.bigbed.getFeatureStream(refName, start, end, {\n          signal,\n          basesPerSpan: end - start,\n        })\n        ob.pipe(\n          mergeAll(),\n          map(\n            (r: {\n              start: number\n              end: number\n              rest?: string\n              uniqueId?: string\n            }) => {\n              const data = parser.parseLine(\n                `${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`,\n                {\n                  uniqueId: r.uniqueId as string,\n                },\n              )\n\n              const { blockCount, blockSizes, blockStarts, chromStarts } = data\n              if (blockCount) {\n                const starts = chromStarts || blockStarts || []\n                const sizes = blockSizes\n                const blocksOffset = r.start\n                data.subfeatures = []\n\n                for (let b = 0; b < blockCount; b += 1) {\n                  const bmin = (starts[b] || 0) + blocksOffset\n                  const bmax = bmin + (sizes[b] || 0)\n                  data.subfeatures.push({\n                    uniqueId: `${r.uniqueId}-${b}`,\n                    start: bmin,\n                    end: bmax,\n                    type: 'block',\n                  })\n                }\n              }\n              if (r.uniqueId === undefined) {\n                throw new Error('invalid bbi feature')\n              }\n              delete data.chromStart\n              delete data.chromEnd\n              delete data.chrom\n\n              const f = new SimpleFeature({\n                id: `${this.id}-${r.uniqueId}`,\n                data: {\n                  ...data,\n                  start: r.start,\n                  end: r.end,\n                  refName,\n                },\n              })\n\n              // collection of heuristics for suggesting that this feature\n              // should be converted to a gene, CNV bigbed has many gene like\n              // features including thickStart and blockCount but no strand\n              return f.get('thickStart') &&\n                f.get('blockCount') &&\n                f.get('strand') !== 0\n                ? ucscProcessedTranscript(f)\n                : f\n            },\n          ),\n        ).subscribe(observer)\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  public freeResources(): void {}\n}\n","import SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\n\nexport function ucscProcessedTranscript(feature: Feature) {\n  const children = feature.children()\n  // split the blocks into UTR, CDS, and exons\n  const thickStart = feature.get('thickStart')\n  const thickEnd = feature.get('thickEnd')\n\n  if (!thickStart && !thickEnd) {\n    return feature\n  }\n\n  const blocks: Feature[] = children\n    ? children\n        .filter(child => child.get('type') === 'block')\n        .sort((a, b) => a.get('start') - b.get('start'))\n    : []\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newChildren: Record<string, any> = []\n  blocks.forEach(block => {\n    const start = block.get('start')\n    const end = block.get('end')\n    if (thickStart >= end) {\n      // left-side UTR\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      const prime = feature.get('strand') > 0 ? 'five' : 'three'\n      newChildren.push(\n        {\n          type: `${prime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      newChildren.push({\n        type: 'CDS',\n        start,\n        end,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      const leftPrime = feature.get('strand') > 0 ? 'five' : 'three'\n      const rightPrime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `${leftPrime}_prime_UTR`,\n          start,\n          end: thickStart,\n        },\n        {\n          type: `CDS`,\n          start: thickStart,\n          end: thickEnd,\n        },\n        {\n          type: `${rightPrime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push(\n        {\n          type: `CDS`,\n          start,\n          end: thickEnd,\n        },\n        {\n          type: `${prime}_prime_UTR`,\n          start: thickEnd,\n          end,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      const prime = feature.get('strand') > 0 ? 'three' : 'five'\n      newChildren.push({\n        type: `${prime}_prime_UTR`,\n        start,\n        end,\n      })\n    }\n  })\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const newData: Record<string, any> = {}\n  feature.tags().forEach(tag => {\n    newData[tag] = feature.get(tag)\n  })\n  newData.subfeatures = newChildren\n  newData.type = 'mRNA'\n  newData.uniqueId = feature.id()\n  delete newData.chromStarts\n  delete newData.chromStart\n  delete newData.chromEnd\n  delete newData.chrom\n  delete newData.blockStarts\n  delete newData.blockSizes\n  delete newData.blockCount\n  delete newData.thickStart\n  delete newData.thickEnd\n  const newFeature = new SimpleFeature({\n    data: newData,\n    id: feature.id(),\n  })\n  return newFeature\n}\n"],"sourceRoot":""}