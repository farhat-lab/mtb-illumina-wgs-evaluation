{"version":3,"sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","observer","model","classes","session","getSession","error","trackName","trackData","trackAdapter","trackType","assembly","isFtp","isRelativeUrl","wrongProtocol","unsupported","Typography","className","Link","href","target","rel","type","UNKNOWN","TextField","value","label","helperText","select","fullWidth","onChange","event","setTrackAdapter","SelectProps","SelectDisplayProps","getEnv","pluginManager","getElementTypesInGroup","map","installedAdapterType","name","MenuItem","key","uri","localPath","config","message","subadapter","style","color","setTrackName","inputProps","setTrackType","installedTrackType","setAssembly","assemblies","assemblyConf","assemblyName","readConfObject","root","display","flexDirection","paper","padding","TrackSourceSelect","Paper","description","location","setLocation","setTrackData","indexTrackData","setIndexTrackData","marginTop","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","steps","useState","activeStep","setActiveStep","handleNext","length","trackId","toLowerCase","replace","Date","now","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","adapter","sequenceAdapter","getConf","view","showTrack","notify","clearData","hideWidget","handleBack","isNextDisabled","blob","Stepper","orientation","idx","Step","StepLabel","StepContent","step","getStepContent","Button","disabled","onClick","variant","data-testid"],"mappings":"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","file":"40.3481a912c94ef75a9f78.worker.js","sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport Link from '@material-ui/core/Link'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport React from 'react'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const session = getSession(model)\n  let error = ''\n  const { trackName, trackData, trackAdapter, trackType, assembly } = model\n\n  if (model.isFtp) {\n    error = `Warning: JBrowse cannot access files using the ftp protocol`\n  } else if (model.isRelativeUrl) {\n    error = `Warning: one or more of your files do not provide the protocol e.g.\n          https://, please provide an absolute URL unless you are sure a\n          relative URL is intended.`\n  } else if (model.wrongProtocol) {\n    error = `Warning: You entered a http:// resources but we cannot access HTTP\n          resources from JBrowse when it is running on https. Please use an\n          https URL for your track, or access the JBrowse app from the http\n          protocol`\n  }\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter.type === UNKNOWN) {\n    return (\n      <>\n        <Typography className={classes.spacing}>\n          Was not able to guess the adapter type for this data, but it may be in\n          the list below. If not, you can{' '}\n          <Link\n            href=\"https://github.com/GMOD/jbrowse-components/releases\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            check for new releases\n          </Link>{' '}\n          of JBrowse to see if they support this data type or{' '}\n          <Link\n            href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            file an issue\n          </Link>{' '}\n          and add a feature request for this data type.\n        </Typography>\n        <TextField\n          className={classes.spacing}\n          value={trackAdapter}\n          label=\"adapterType\"\n          helperText=\"An adapter type\"\n          select\n          fullWidth\n          onChange={event => {\n            model.setTrackAdapter({ type: event.target.value })\n          }}\n          SelectProps={{\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n          }}\n        >\n          {getEnv(session)\n            .pluginManager.getElementTypesInGroup('adapter')\n            .map(\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              (installedAdapterType: any) =>\n                // Exclude SNPCoverageAdapter from primary adapter user selection\n                installedAdapterType.name !== 'SNPCoverageAdapter' && (\n                  <MenuItem\n                    key={installedAdapterType.name}\n                    value={installedAdapterType.name}\n                  >\n                    {installedAdapterType.name}\n                  </MenuItem>\n                ),\n            )}\n        </TextField>\n      </>\n    )\n  }\n  if (!trackAdapter.type) {\n    // TODO: if file type is unrecognized, provide some way of specifying\n    // adapter and guessing reasonable default for it.\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n  if (trackData.uri || trackData.localPath || trackData.config) {\n    let message = null\n    if (trackData.uri || trackData.localPath) {\n      message =\n        trackAdapter.type === 'SNPCoverageAdapter' ? (\n          <Typography className={classes.spacing}>\n            Selected <code>{trackType}</code>. Using adapter{' '}\n            <code>{trackAdapter.type}</code> with subadapter{' '}\n            <code>{trackAdapter.subadapter.type}</code>. Please enter a track\n            name and, if necessary, update the track type.\n          </Typography>\n        ) : (\n          <Typography className={classes.spacing}>\n            Using adapter <code>{trackAdapter.type}</code> and guessing track\n            type <code>{trackType}</code>. Please enter a track name and, if\n            necessary, update the track type.\n          </Typography>\n        )\n    } else {\n      message = (\n        <Typography className={classes.spacing}>\n          Please enter a track type and track name.\n        </Typography>\n      )\n    }\n    return (\n      <>\n        {message}\n        {error ? (\n          <Typography style={{ color: 'orange' }}>{error}</Typography>\n        ) : null}\n        <TextField\n          className={classes.spacing}\n          label=\"trackName\"\n          helperText=\"A name for this track\"\n          fullWidth\n          value={trackName}\n          onChange={event => model.setTrackName(event.target.value)}\n          inputProps={{ 'data-testid': 'trackNameInput' }}\n        />\n        <TextField\n          className={classes.spacing}\n          value={trackType}\n          label=\"trackType\"\n          helperText=\"A track type\"\n          select\n          fullWidth\n          onChange={event => {\n            model.setTrackType(event.target.value)\n          }}\n          SelectProps={{\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n          }}\n        >\n          {getEnv(session)\n            .pluginManager.getElementTypesInGroup('track')\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map((installedTrackType: any) => (\n              <MenuItem\n                key={installedTrackType.name}\n                value={installedTrackType.name}\n              >\n                {installedTrackType.name}\n              </MenuItem>\n            ))}\n        </TextField>\n        <TextField\n          value={assembly}\n          label=\"assemblyName\"\n          helperText=\"Assembly to which the track will be added\"\n          select\n          fullWidth\n          onChange={event => {\n            model.setAssembly(event.target.value)\n          }}\n          SelectProps={{\n            // @ts-ignore\n            SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n          }}\n        >\n          {session.assemblies.map(assemblyConf => {\n            const assemblyName = readConfObject(assemblyConf, 'name')\n            return (\n              <MenuItem key={assemblyName} value={assemblyName}>\n                {assemblyName}\n              </MenuItem>\n            )\n          })}\n        </TextField>\n      </>\n    )\n  }\n  return <></>\n}\n\nexport default observer(ConfirmTrack)\n","import { FileSelector } from '@jbrowse/core/ui'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <FileSelector\n          name=\"URL\"\n          description=\"\"\n          location={model.trackData}\n          setLocation={model.setTrackData}\n        />\n        <FileSelector\n          name=\"Index URL (optional)\"\n          description=\"Automatically inferred from the URL if not supplied\"\n          location={model.indexTrackData}\n          setLocation={model.setIndexTrackData}\n        />\n      </Paper>\n    </div>\n  )\n}\n\nexport default TrackSourceSelect\n","import { getSession } from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport Button from '@material-ui/core/Button'\nimport Step from '@material-ui/core/Step'\nimport StepContent from '@material-ui/core/StepContent'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport Stepper from '@material-ui/core/Stepper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { observer, PropTypes as MobxPropTypes } from 'mobx-react'\nimport React, { useState } from 'react'\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    // @ts-ignore\n    session.addTrackConf({\n      trackId,\n      type: trackType,\n      name: trackName,\n      assemblyNames: [assembly],\n      adapter: {\n        ...trackAdapter,\n        sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n      },\n    })\n    if (model.view) {\n      model.view.showTrack(trackId)\n    } else {\n      session.notify(\n        'Open a new view, or use the track selector in an existing view, to view this track',\n        'info',\n      )\n    }\n    model.clearData()\n    // @ts-ignore\n    session.hideWidget(model)\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !(trackData.uri || trackData.localPath || trackData.blob)\n      case 1:\n        return !(trackName && trackType && trackAdapter.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nAddTrackWidget.propTypes = {\n  model: MobxPropTypes.observableObject.isRequired,\n}\n\nexport default observer(AddTrackWidget)\n"],"sourceRoot":""}