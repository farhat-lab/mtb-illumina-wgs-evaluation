{"version":3,"sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/HierarchicalTrackSelector.js"],"names":["CloseConnectionDialog","lazy","DeleteConnectionDialog","ManageConnectionsDialog","ToggleConnectionsDialog","useStyles","makeStyles","theme","searchBox","marginBottom","menuIcon","marginRight","fab","position","bottom","right","compactCheckbox","padding","checkboxLabel","backgroundColor","accordionBase","display","accordionCard","cursor","nestingLevelMarker","borderLeft","accordionColor","background","color","width","paddingLeft","accordionText","margin","Node","props","data","isOpen","style","setOpen","isLeaf","nestingLevel","checked","id","name","onChange","conf","onMoreInfo","classes","marginLeft","unsupported","className","undefined","Array","fill","map","key","left","idx","height","onClick","whiteSpace","control","disabled","inputProps","label","e","target","data-testid","getNodeData","node","extra","defaultHeight","isOpenByDefault","HierarchicalTree","observer","tree","model","treeRef","useRef","useState","info","setMoreInfo","session","getSession","filterText","trackId","treeWalker","useCallback","i","parentMeta","curr","menuItems","useEffect","refreshNodes","useDefaultHeight","ref","anchorEl","onMenuItemClick","callback","open","Boolean","onClose","AutoSizedHierarchicalTree","offset","jest","disableWidth","Wrapper","overrideDimensions","children","HierarchicalTrackSelectorContainer","toolbarHeight","setAnchorEl","event","handleFabClose","widget","view","HierarchicalTrackSelectorHeader","setHeaderHeight","setAssemblyIdx","assemblyIdx","connectionAnchorEl","setConnectionAnchorEl","menuAnchorEl","setMenuAnchorEl","modalInfo","setModalInfo","deleteDialogDetails","setDeleteDialogDetails","connectionManagerOpen","setConnectionManagerOpen","connectionToggleOpen","setConnectionToggleOpen","assemblyNames","assemblyName","readConfObject","connectionConf","result","safelyBreakConnection","dereferenceTypeCount","Object","connectionMenuItems","assemblyMenuItems","subMenu","value","fullWidth","InputProps","endAdornment","clearFilterText","fallback","handleClose","breakConnection","HierarchicalTrackSelector","headerHeight","nodes"],"mappings":"2cAuCMA,EAAwBC,gBAAK,kBAAM,mCACnCC,EAAyBD,gBAAK,kBAAM,mCACpCE,EAA0BF,gBAAK,kBAAM,mCACrCG,EAA0BH,gBAAK,kBAAM,mCAErCI,EAAYC,aAAW,SAAAC,GAAK,cAAK,CACrCC,UAAW,CACTC,aAAcF,cAEhBG,SAAU,CACRC,YAAaJ,UADL,GAERE,aAAc,GAEhBG,IAAK,CACHC,SADG,WAEHC,OAAQP,UAFL,GAGHQ,MAAOR,cAETS,gBAAiB,CACfC,QAAS,GAGXC,cAAe,CACbP,YADa,EAEb,UAAW,CACTQ,gBAAiB,SAOrBC,cAAe,CACbC,QAAS,QAGXC,cAAe,CACbL,QADa,EAEbM,OAFa,UAGbF,QAAS,QAGXG,mBAAoB,CAClBX,SADkB,WAElBY,WAAY,oBAIdC,eAAgB,CACdC,WAAU,UAAEpB,UAAF,6BAAEA,EADE,KAEdqB,MAAK,UAAErB,UAAF,6BAAEA,EAFO,aAGdsB,MAHc,OAIdR,QAJc,OAKdS,YAAa,GAIfC,cAAe,CACbC,OAAQ,cAMNC,EAAO,SAAAC,GAAS,IACZC,EAAiCD,EADrB,KACNE,EAA2BF,EADrB,OACEG,EAAmBH,EADrB,MACSI,EAAYJ,EADrB,QAGlBK,EAQEJ,EAXgB,OAIlBK,EAOEL,EAXgB,aAKlBM,EAMEN,EAXgB,QAMlBO,EAKEP,EAXgB,GAOlBQ,EAIER,EAXgB,KAQlBS,EAGET,EAXgB,SASlBU,EAEEV,EAXgB,KAUlBW,EACEX,EAXgB,WAYdY,EAAU1C,IAEV2C,EADN,GACmBR,GAAwBD,EAD3C,GACA,GACMU,EACJN,IAASA,6BAAkCA,WAD7C,cAGA,OACE,yBAAKN,MAAL,EAAmBa,UAAYX,OAAiCY,EAAxBJ,EAAV,eAC3B,IAAIK,MAAMZ,GAAca,KAAK,GAAGC,KAAI,qBACnC,yBACEC,IAAG,eADL,GAEElB,MAAO,CAAEmB,KAVjB,GAUuBC,EAAR,EAAyBC,OAAQrB,EAAMqB,QAC9CR,UAAWH,EAAQvB,wBAGvB,yBACE0B,UAAYX,OADd,EACuBQ,EAAV,cACXY,QAAS,kBAAMrB,GAAN,IACTD,MAAO,CACLW,WADK,EAELY,WAFK,SAGL/B,MAAO,SAGT,yBAAKqB,UAAYX,OAAkCY,EAAzBJ,EAAV,gBACZR,EAQA,oCACE,uBACEW,UAAWH,EADb,cAEEc,QACE,uBACEX,UAAWH,EADb,gBAEEN,QAFF,EAGEG,SAAU,kBAAMA,EAAN,IACVhB,MAJF,UAKEkC,SALF,EAMEC,WAAY,CACV,4CAINC,MAAOrB,IAET,uBACEgB,QAAS,SAAAM,GAAC,OAAInB,EAAW,CAAEoB,OAAQD,EAAV,cAA2BvB,GAA3B,EAA+BG,UACxDjB,MAFF,YAGEuC,cAAA,gCAEA,sBAjDd,QAoBU,yBAAKjB,UAAWH,EAAQhB,eACtB,2BACGK,EAAS,sBAAH,MAA2B,sBADpC,MAFH,QAwCLgC,EAAc,SAACC,EAAM7B,EAAc8B,GACvC,IAAM/B,IAAW8B,EAAjB,KACA,MAAO,CACLlC,KAAM,OAAF,IAAE,CAAF,aACFoC,cAAehC,EAAS,GADtB,GAEFA,OAFE,EAGFiC,iBAHE,EAIFhC,gBAJE,GADC,GASLA,aATK,EAUL6B,SAOEI,EAAmBC,oBAAS,YAA6B,MAA1BhB,EAA0B,EAA1BA,OAAQiB,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC3CC,EAAUC,iBAAhB,MAD6D,EAEjCC,qBAFiC,mBAEtDC,EAFsD,KAEhDC,EAFgD,KAGvDC,EAAUC,qBAAhB,GACQC,EAAeR,EAJsC,WAMvDN,EAAQ,CACZ1B,SAAU,SAAAyC,GAAO,OAAIT,mBAAJ,IACjB9B,WAAYmC,GAERK,EAAaC,sBAAW,UAC5B,0FACWC,EADX,cACkBA,EAAIb,WADtB,wBAEI,OAFJ,SAEUP,EAAYO,WAAD,KAAjB,GAFJ,OAC4Ca,IAD5C,sBAMuB,YANvB,mBAMUC,EANV,OAQaD,EARb,eAQoBA,EAAIC,gBARxB,yBAUM,OADMC,EAAOD,gBATnB,aAUYrB,EAAYsB,EAAMD,eAAP,EAAjB,GAVN,QAQyDD,IARzD,kFAcA,CAACb,EAfH,IAkBM9B,EAAI,OAAGmC,QAAH,IAAGA,OAAH,EAAGA,EAAb,KACMW,EAAa9C,IAAI,UAAIqC,EAAJ,4CAAIA,SAAT,KAAlB,GAQA,OANAU,qBAAU,WACRf,wBAA8B,CAC5BgB,cAD4B,EAE5BC,kBAAkB,MAEnB,CAACnB,EALJiB,IAOE,oCACE,uBAAkBG,IAAlB,EAAgCT,WAAhC,EAAwD5B,OAAQA,GADlE,GAIE,uBACEsC,SAAQ,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EADZ,OAEEW,UAFF,EAGEM,gBAAiB,cACfC,IACAjB,WAEFkB,KAAMC,QAPR,GAQEC,QAAS,kBAAMpB,OAAN,UAQXqB,EAA4B,SAAC,GAA4B,IAA1B3B,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAO2B,EAAa,EAAbA,OAChD,MAAuB,qBAATC,KACZ,uBAAWC,cAAY,IACpB,YAAgB,IAAb/C,EAAa,EAAbA,OACF,OACE,qBACEA,OAAQA,EADV,EAEEkB,MAFF,EAGED,KAAMA,OAMd,qBAAkBjB,OAAlB,IAAgCkB,MAAhC,EAA8CD,KAAMA,KAIlD+B,EAAU,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,SACrC,OAAOD,EACL,yBAAKtE,MAAK,mBADa,GAGvB,oCAHF,IAMIwE,EAAqCnC,oBACzC,YAAkD,IAA/CE,EAA+C,EAA/CA,MAAOkC,EAAwC,EAAxCA,cAAeH,EAAyB,EAAzBA,mBACjB5D,EAAU1C,IACV6E,EAAUC,qBAAhB,GAFgD,EAGhBJ,mBAHgB,yBAGzCiB,EAHyC,KAG/Be,EAH+B,KAKhD,aACEA,QAEF,OACE,qBAASJ,mBAAoBA,GAC3B,qBACE/B,MADF,EAEEkC,cAFF,EAGEH,mBAAoBA,IAEtB,uBACE/E,MADF,YAEEsB,UAAWH,EAFb,IAGEY,QAAS,SAAAqD,GACPD,EAAYC,EAAZD,iBAGF,sBAbJ,OAeE,uBACEf,SADF,EAEEG,KAAMC,QAFR,GAGEC,QAAS,kBAAMU,EAAN,QAET,uBACEpD,QAAS,WACPsD,IACA,IAAMC,EAAShC,kCAAf,uBAIAA,kBAZN,kBAiBE,uBACEvB,QAAS,WACPsD,IACA,IAAMC,EAAShC,EAAA,4CAGb,CACEiC,KAAMvC,OAAWlC,KAGrBwC,kBA3CV,kBAsDEkC,EAAkC1C,oBACtC,YAA6D,IAA1DE,EAA0D,EAA1DA,MAAOyC,EAAmD,EAAnDA,gBAAiBC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YACnCxE,EAAU1C,IACV6E,EAAUC,qBAAhB,GAF2D,EAGPJ,qBAHO,mBAGpDyC,EAHoD,KAGhCC,EAHgC,OAInB1C,qBAJmB,mBAIpD2C,EAJoD,KAItCC,EAJsC,OAKzB5C,qBALyB,mBAKpD6C,EALoD,KAKzCC,EALyC,OAML9C,qBANK,mBAMpD+C,EANoD,KAM/BC,EAN+B,OAODhD,oBAPC,sBAOpDiD,EAPoD,KAO7BC,EAP6B,OAQHlD,oBARG,sBAQpDmD,EARoD,KAQ9BC,EAR8B,KASnDC,EAAkBxD,EATiC,cAUrDyD,EAAeD,EAArB,GAEA,gBACE,IAAMzF,EAAO2F,yBAAeC,EAA5B,QACMC,EAAStD,2BAAf,GACA,KAAY,wBACHuD,EADG,KACoBC,EADpB,KAENC,sBAAJ,EACEd,EAAa,CACXU,eADW,EAEXE,sBAFW,EAGXC,qBAHW,EAIX/F,SAGF8F,IAGJ,GACEV,EAAuB,CAAEpF,KAAF,EAAQ4F,mBAInC,IAAMK,EAAsB,CAC1B,CACE5E,MADF,6BAEEL,QAAS,kBAAMwE,GAAN,KAEX,CACEnE,MADF,wBAEEL,QAAS,kBAAMsE,GAAN,MAGPY,EACJT,EAAA,SACI,CACE,CACEpE,MADF,qBAEE8E,QAASV,EAAA,KAAkB,oBAAgB,CACzCpE,MADyC,EAEzCL,QAAS,WACP2D,YARd,GAeM3B,EAAY,CAChB,CACE3B,MADF,eAEEL,QAAS,WACPuB,aACEA,EAAA,4CAAsD,CACpDiC,KAAMvC,OAAWlC,SANZ,OAAf,GAeA,OACE,yBACEqD,IAAK,YAAG,OAAIsB,GAAgB,eAAG,IAAH,4CAApB,IACRlD,cAAY,+BAEZ,yBAAK9B,MAAO,CAAEhB,QAAS,SACrB,uBACE6B,UAAWH,EADb,SAEEY,QAAS,SAAAqD,GACPW,EAAgBX,EAAhBW,iBAGF,sBAPJ,OASE,uBACEzE,UAAWH,EADb,SAEEY,QAAS,SAAAqD,GACPS,EAAsBT,EAAtBS,iBAGF,sBAfJ,OAiBE,uBACEvE,UAAWH,EADb,UAEEiB,MAFF,gBAGE+E,MAAOnE,EAHT,WAIEhC,SAAU,SAAAoE,GAAK,OAAIpC,gBAAoBoC,SAAxB,QACfgC,WALF,EAMEC,WAAY,CACVC,aACE,uBAAgBrI,SAAS,OACvB,uBAAYe,MAAZ,YAA8B+B,QAASiB,EAAMuE,iBAC3C,sBAFJ,YAUR,uBACEnD,SADF,EAEEG,KAAMC,QAFR,GAGEH,gBAAiB,cACfC,IACAuB,WAEFpB,QAAS,WACPoB,WAEF9B,UAAS,CACP,CACE3B,MADF,iBAEEL,QAAS,WACPuB,aACEA,kCADFA,2BAJG,YAgBX,uBACEc,SADF,EAEEG,KAAMC,QAFR,GAGEH,gBAAiB,cACfC,IACAyB,WAEFtB,QAAS,WACPsB,WAEFhC,UAAWA,IAGb,8BAAUyD,SAAU,+BACjBxB,EACC,qBACEA,UADF,EAEEC,aAFF,EAGE3C,QAASA,IAET4C,EACF,qBACEuB,YAAa,WACXtB,WAEFD,oBAJF,EAKE5C,QAASA,IAbf,KAgBG8C,EACC,qBACEqB,YAAa,kBAAMpB,GAAN,IACbqB,gBAFF,EAGEpE,QAASA,IApBf,KAuBGgD,EACC,qBACEmB,YAAa,kBAAMlB,GAAN,IACbjD,QAFF,EAGEoE,gBAHF,EAIEjB,aAAcA,IA3GxB,UAmHEkB,EAA4B7E,oBAAS,YAAkC,IAA/BE,EAA+B,EAA/BA,MAA+B,IAAxBkC,qBAAwB,MAAR,EAAQ,IACrC/B,mBADqC,sBACpEwC,EADoE,KACvDD,EADuD,OAEnCvC,mBAFmC,sBAEpEyE,EAFoE,KAEtDnC,EAFsD,KAInEe,EAAkBxD,EAJiD,cAM3E,IADqBwD,EAArB,GAEE,YAEF,IAAMqB,EAAQ7E,YAAgBwD,EAA9B,IAEA,OACE,oCACE,qBACExD,MADF,EAEEyC,gBAFF,EAGEC,eAHF,EAIEC,YAAaA,IAEf,qBACE5C,KADF,EAEEC,MAFF,EAGE2B,OAAQO,EAAgB0C,QAMhC","file":"static/js/46.30f00249.chunk.js","sourcesContent":["/* eslint-disable react/prop-types,no-nested-ternary,jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events */\nimport React, {\n  Suspense,\n  lazy,\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n} from 'react'\nimport {\n  Checkbox,\n  Fab,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  TextField,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport ClearIcon from '@material-ui/icons/Clear'\nimport AddIcon from '@material-ui/icons/Add'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MoreIcon from '@material-ui/icons/MoreHoriz'\nimport PowerOutlinedIcon from '@material-ui/icons/PowerOutlined'\n\n// other\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport JBrowseMenu from '@jbrowse/core/ui/Menu'\nimport { getSession } from '@jbrowse/core/util'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { VariableSizeTree } from 'react-vtree'\n\nconst CloseConnectionDialog = lazy(() => import('./CloseConnectionDialog'))\nconst DeleteConnectionDialog = lazy(() => import('./DeleteConnectionDialog'))\nconst ManageConnectionsDialog = lazy(() => import('./ManageConnectionsDialog'))\nconst ToggleConnectionsDialog = lazy(() => import('./ToggleConnectionsDialog'))\n\nconst useStyles = makeStyles(theme => ({\n  searchBox: {\n    marginBottom: theme.spacing(2),\n  },\n  menuIcon: {\n    marginRight: theme.spacing(1),\n    marginBottom: 0,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(6),\n    right: theme.spacing(6),\n  },\n  compactCheckbox: {\n    padding: 0,\n  },\n\n  checkboxLabel: {\n    marginRight: 0,\n    '&:hover': {\n      backgroundColor: '#eee',\n    },\n  },\n\n  // this accordionBase element's small padding is used to give a margin to\n  // accordionColor it a \"margin\" because the virtualized elements can't really\n  // use margin in a conventional way (it doesn't affect layout)\n  accordionBase: {\n    display: 'flex',\n  },\n\n  accordionCard: {\n    padding: 3,\n    cursor: 'pointer',\n    display: 'flex',\n  },\n\n  nestingLevelMarker: {\n    position: 'absolute',\n    borderLeft: '1.5px solid #555',\n  },\n  // accordionColor set's display:flex so that the child accordionText use\n  // vertically centered text\n  accordionColor: {\n    background: theme.palette.tertiary?.main,\n    color: theme.palette.tertiary?.contrastText,\n    width: '100%',\n    display: 'flex',\n    paddingLeft: 5,\n  },\n\n  // margin:auto 0 to center text vertically\n  accordionText: {\n    margin: 'auto 0',\n  },\n}))\n\n// An individual node in the track selector. Note: manually sets cursor:\n// pointer improves usability for what can be clicked\nconst Node = props => {\n  const { data, isOpen, style, setOpen } = props\n  const {\n    isLeaf,\n    nestingLevel,\n    checked,\n    id,\n    name,\n    onChange,\n    conf,\n    onMoreInfo,\n  } = data\n  const classes = useStyles()\n  const width = 10\n  const marginLeft = nestingLevel * width + (isLeaf ? width : 0)\n  const unsupported =\n    name && (name.endsWith('(Unsupported)') || name.endsWith('(Unknown)'))\n\n  return (\n    <div style={style} className={!isLeaf ? classes.accordionBase : undefined}>\n      {new Array(nestingLevel).fill(0).map((_, idx) => (\n        <div\n          key={`mark-${idx}`}\n          style={{ left: idx * width + 4, height: style.height }}\n          className={classes.nestingLevelMarker}\n        />\n      ))}\n      <div\n        className={!isLeaf ? classes.accordionCard : undefined}\n        onClick={() => setOpen(!isOpen)}\n        style={{\n          marginLeft,\n          whiteSpace: 'nowrap',\n          width: '100%',\n        }}\n      >\n        <div className={!isLeaf ? classes.accordionColor : undefined}>\n          {!isLeaf ? (\n            <div className={classes.accordionText}>\n              <Typography>\n                {isOpen ? <ArrowDropDownIcon /> : <ArrowRightIcon />}\n                {name}\n              </Typography>\n            </div>\n          ) : (\n            <>\n              <FormControlLabel\n                className={classes.checkboxLabel}\n                control={\n                  <Checkbox\n                    className={classes.compactCheckbox}\n                    checked={checked}\n                    onChange={() => onChange(id)}\n                    color=\"primary\"\n                    disabled={unsupported}\n                    inputProps={{\n                      'data-testid': `htsTrackEntry-${id}`,\n                    }}\n                  />\n                }\n                label={name}\n              />\n              <IconButton\n                onClick={e => onMoreInfo({ target: e.currentTarget, id, conf })}\n                color=\"secondary\"\n                data-testid={`htsTrackEntryMenu-${id}`}\n              >\n                <MoreIcon />\n              </IconButton>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst getNodeData = (node, nestingLevel, extra) => {\n  const isLeaf = !!node.conf\n  return {\n    data: {\n      defaultHeight: isLeaf ? 22 : 40,\n      isLeaf,\n      isOpenByDefault: true,\n      nestingLevel,\n      ...node,\n      ...extra,\n    },\n    nestingLevel,\n    node,\n  }\n}\n\n// this is the main tree component for the hierarchical track selector in note:\n// in jbrowse-web the toolbar is position=\"sticky\" which means the autosizer\n// includes the height of the toolbar, so we subtract the given offsets\nconst HierarchicalTree = observer(({ height, tree, model }) => {\n  const treeRef = useRef(null)\n  const [info, setMoreInfo] = useState()\n  const session = getSession(model)\n  const { filterText } = model\n\n  const extra = {\n    onChange: trackId => model.view.toggleTrack(trackId),\n    onMoreInfo: setMoreInfo,\n  }\n  const treeWalker = useCallback(\n    function* treeWalker() {\n      for (let i = 0; i < tree.children.length; i++) {\n        yield getNodeData(tree.children[i], 0, extra)\n      }\n\n      while (true) {\n        const parentMeta = yield\n\n        for (let i = 0; i < parentMeta.node.children.length; i++) {\n          const curr = parentMeta.node.children[i]\n          yield getNodeData(curr, parentMeta.nestingLevel + 1, extra)\n        }\n      }\n    },\n    [tree, extra],\n  )\n\n  const conf = info?.conf\n  const menuItems = (conf && session.getTrackActionMenuItems?.(conf)) || []\n\n  useEffect(() => {\n    treeRef.current.recomputeTree({\n      refreshNodes: true,\n      useDefaultHeight: true,\n    })\n  }, [tree, filterText])\n  return (\n    <>\n      <VariableSizeTree ref={treeRef} treeWalker={treeWalker} height={height}>\n        {Node}\n      </VariableSizeTree>\n      <JBrowseMenu\n        anchorEl={info?.target}\n        menuItems={menuItems}\n        onMenuItemClick={(_event, callback) => {\n          callback()\n          setMoreInfo(undefined)\n        }}\n        open={Boolean(info)}\n        onClose={() => setMoreInfo(undefined)}\n      />\n    </>\n  )\n})\n\n// Don't use autosizer in jest and instead hardcode a height, otherwise fails\n// jest tests\nconst AutoSizedHierarchicalTree = ({ tree, model, offset }) => {\n  return typeof jest === 'undefined' ? (\n    <AutoSizer disableWidth>\n      {({ height }) => {\n        return (\n          <HierarchicalTree\n            height={height - offset}\n            model={model}\n            tree={tree}\n          />\n        )\n      }}\n    </AutoSizer>\n  ) : (\n    <HierarchicalTree height={9000} model={model} tree={tree} />\n  )\n}\n\nconst Wrapper = ({ overrideDimensions, children }) => {\n  return overrideDimensions ? (\n    <div style={{ ...overrideDimensions }}>{children}</div>\n  ) : (\n    <>{children}</>\n  )\n}\nconst HierarchicalTrackSelectorContainer = observer(\n  ({ model, toolbarHeight, overrideDimensions }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    function handleFabClose() {\n      setAnchorEl(null)\n    }\n    return (\n      <Wrapper overrideDimensions={overrideDimensions}>\n        <HierarchicalTrackSelector\n          model={model}\n          toolbarHeight={toolbarHeight}\n          overrideDimensions={overrideDimensions}\n        />\n        <Fab\n          color=\"secondary\"\n          className={classes.fab}\n          onClick={event => {\n            setAnchorEl(event.currentTarget)\n          }}\n        >\n          <AddIcon />\n        </Fab>\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={() => setAnchorEl(null)}\n        >\n          <MenuItem\n            onClick={() => {\n              handleFabClose()\n              const widget = session.addWidget(\n                'AddConnectionWidget',\n                'addConnectionWidget',\n              )\n              session.showWidget(widget)\n            }}\n          >\n            Add connection\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleFabClose()\n              const widget = session.addWidget(\n                'AddTrackWidget',\n                'addTrackWidget',\n                {\n                  view: model.view.id,\n                },\n              )\n              session.showWidget(widget)\n            }}\n          >\n            Add track\n          </MenuItem>\n        </Menu>\n      </Wrapper>\n    )\n  },\n)\n\nconst HierarchicalTrackSelectorHeader = observer(\n  ({ model, setHeaderHeight, setAssemblyIdx, assemblyIdx }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [connectionAnchorEl, setConnectionAnchorEl] = useState()\n    const [menuAnchorEl, setMenuAnchorEl] = useState()\n    const [modalInfo, setModalInfo] = useState()\n    const [deleteDialogDetails, setDeleteDialogDetails] = useState()\n    const [connectionManagerOpen, setConnectionManagerOpen] = useState(false)\n    const [connectionToggleOpen, setConnectionToggleOpen] = useState(false)\n    const { assemblyNames } = model\n    const assemblyName = assemblyNames[assemblyIdx]\n\n    function breakConnection(connectionConf, deletingConnection) {\n      const name = readConfObject(connectionConf, 'name')\n      const result = session.prepareToBreakConnection(connectionConf)\n      if (result) {\n        const [safelyBreakConnection, dereferenceTypeCount] = result\n        if (Object.keys(dereferenceTypeCount).length > 0) {\n          setModalInfo({\n            connectionConf,\n            safelyBreakConnection,\n            dereferenceTypeCount,\n            name,\n          })\n        } else {\n          safelyBreakConnection()\n        }\n      }\n      if (deletingConnection) {\n        setDeleteDialogDetails({ name, connectionConf })\n      }\n    }\n\n    const connectionMenuItems = [\n      {\n        label: 'Turn on/off connections...',\n        onClick: () => setConnectionToggleOpen(true),\n      },\n      {\n        label: 'Delete connections...',\n        onClick: () => setConnectionManagerOpen(true),\n      },\n    ]\n    const assemblyMenuItems =\n      assemblyNames.length > 1\n        ? [\n            {\n              label: 'Select assembly...',\n              subMenu: assemblyNames.map((name, idx) => ({\n                label: name,\n                onClick: () => {\n                  setAssemblyIdx(idx)\n                },\n              })),\n            },\n          ]\n        : []\n\n    const menuItems = [\n      {\n        label: 'Add track...',\n        onClick: () => {\n          session.showWidget(\n            session.addWidget('AddTrackWidget', 'addTrackWidget', {\n              view: model.view.id,\n            }),\n          )\n        },\n      },\n\n      ...assemblyMenuItems,\n    ]\n\n    return (\n      <div\n        ref={ref => setHeaderHeight(ref?.getBoundingClientRect().height || 0)}\n        data-testid=\"hierarchical_track_selector\"\n      >\n        <div style={{ display: 'flex' }}>\n          <IconButton\n            className={classes.menuIcon}\n            onClick={event => {\n              setMenuAnchorEl(event.currentTarget)\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <IconButton\n            className={classes.menuIcon}\n            onClick={event => {\n              setConnectionAnchorEl(event.currentTarget)\n            }}\n          >\n            <PowerOutlinedIcon />\n          </IconButton>\n          <TextField\n            className={classes.searchBox}\n            label=\"Filter tracks\"\n            value={model.filterText}\n            onChange={event => model.setFilterText(event.target.value)}\n            fullWidth\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton color=\"secondary\" onClick={model.clearFilterText}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n\n        <JBrowseMenu\n          anchorEl={connectionAnchorEl}\n          open={Boolean(connectionAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setConnectionAnchorEl(undefined)\n          }}\n          onClose={() => {\n            setConnectionAnchorEl(undefined)\n          }}\n          menuItems={[\n            {\n              label: 'Add connection',\n              onClick: () => {\n                session.showWidget(\n                  session.addWidget(\n                    'AddConnectionWidget',\n                    'addConnectionWidget',\n                  ),\n                )\n              },\n            },\n            ...connectionMenuItems,\n          ]}\n        />\n\n        <JBrowseMenu\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setMenuAnchorEl(undefined)\n          }}\n          onClose={() => {\n            setMenuAnchorEl(undefined)\n          }}\n          menuItems={menuItems}\n        />\n\n        <Suspense fallback={<div />}>\n          {modalInfo ? (\n            <CloseConnectionDialog\n              modalInfo={modalInfo}\n              setModalInfo={setModalInfo}\n              session={session}\n            />\n          ) : deleteDialogDetails ? (\n            <DeleteConnectionDialog\n              handleClose={() => {\n                setDeleteDialogDetails(undefined)\n              }}\n              deleteDialogDetails={deleteDialogDetails}\n              session={session}\n            />\n          ) : null}\n          {connectionManagerOpen ? (\n            <ManageConnectionsDialog\n              handleClose={() => setConnectionManagerOpen(false)}\n              breakConnection={breakConnection}\n              session={session}\n            />\n          ) : null}\n          {connectionToggleOpen ? (\n            <ToggleConnectionsDialog\n              handleClose={() => setConnectionToggleOpen(false)}\n              session={session}\n              breakConnection={breakConnection}\n              assemblyName={assemblyName}\n            />\n          ) : null}\n        </Suspense>\n      </div>\n    )\n  },\n)\nconst HierarchicalTrackSelector = observer(({ model, toolbarHeight = 0 }) => {\n  const [assemblyIdx, setAssemblyIdx] = useState(0)\n  const [headerHeight, setHeaderHeight] = useState(0)\n\n  const { assemblyNames } = model\n  const assemblyName = assemblyNames[assemblyIdx]\n  if (!assemblyName) {\n    return null\n  }\n  const nodes = model.hierarchy(assemblyNames[assemblyIdx])\n\n  return (\n    <>\n      <HierarchicalTrackSelectorHeader\n        model={model}\n        setHeaderHeight={setHeaderHeight}\n        setAssemblyIdx={setAssemblyIdx}\n        assemblyIdx={assemblyIdx}\n      />\n      <AutoSizedHierarchicalTree\n        tree={nodes}\n        model={model}\n        offset={toolbarHeight + headerHeight}\n      />\n    </>\n  )\n})\n\nexport default HierarchicalTrackSelectorContainer\n"],"sourceRoot":""}