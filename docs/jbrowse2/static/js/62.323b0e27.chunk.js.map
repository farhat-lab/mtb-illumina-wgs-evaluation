{"version":3,"sources":["../../../plugins/gff3/src/Gff3TabixAdapter/Gff3TabixAdapter.ts"],"names":["config","gff","dontRedispatch","gffGzLocation","readConfObject","indexType","location","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","renameRefSeqs","n","opts","this","getReferenceSequenceNames","getHeader","query","ObservableCreate","observer","a","getMetadata","metadata","getFeaturesHelper","signal","allowRedispatch","originalQuery","lines","getLines","refName","start","end","line","fileOffset","push","parseLine","columnNumbers","length","minStart","Infinity","maxEnd","forEach","featureType","fields","includes","gff3","map","lineRecord","lineHash","join","parseStringSync","parseFeatures","parseComments","parseDirectives","parseSequences","featureLocs","formatFeatures","f","doesIntersect2","get","next","complete","error","split","featureLoc","SimpleFeature","data","featureData","id","attributes","_lineHash","strand","phase","Number","seq_id","score","defaultFields","Object","keys","b","toLowerCase","attr","Array","isArray","child_features","subfeatures","childLocs","childLoc","flat","derived_features","_linehash","BaseFeatureDataAdapter"],"mappings":"uXA2CE,WAAmBA,GAAyC,2BAC1D,cAAMA,IALEC,SAIkD,IAFlDC,oBAEkD,EAE1D,IAAMC,EAAgBC,yBAAeJ,EAAQ,iBACvCK,EAAYD,yBAAeJ,EAAQ,CAAC,QAAS,cAC7CM,EAAWF,yBAAeJ,EAAQ,CAAC,QAAS,aAC5CE,EAAiBE,yBAAeJ,EAAQ,kBALY,OAO1D,EAAKE,eAAiBA,GAAkB,CAAC,aAAc,SAAU,UACjE,EAAKD,IAAM,IAAIM,mBAAiB,CAC9BC,WAAYC,uBAAaN,GACzBO,cAA6B,QAAdL,EAAsBI,uBAAaH,QAAYK,EAC9DC,cAA6B,QAAdP,EAAsBI,uBAAaH,QAAYK,EAC9DE,eAAgB,GAAK,KAAL,IAAK,EAAK,IAC1BC,cAAe,SAACC,GAAD,OAAeA,KAb0B,E,6LAiBnCC,E,+BAAoB,G,kBACpCC,KAAKhB,IAAIiB,0BAA0BF,I,2QAInCC,KAAKhB,IAAIkB,a,wIAGCC,GAAiD,WAAxBJ,EAAwB,uDAAJ,GAC9D,OAAOK,2BAAgB,uCAAU,WAAMC,GAAN,eAAAC,EAAA,sEACR,EAAKtB,IAAIuB,cADD,OACzBC,EADyB,OAE/B,EAAKC,kBAAkBN,EAAOJ,EAAMS,EAAUH,GAAU,GAFzB,2CAAV,sDAGpBN,EAAKW,U,iFAIRP,G,iHACAJ,E,+BAAoB,GACpBS,E,uBACAH,E,uBACAM,E,uBACAC,E,+BAAgBT,E,SAGRU,EAAuB,G,SAEvBb,KAAKhB,IAAI8B,SACbX,EAAMY,QACNZ,EAAMa,MACNb,EAAMc,KACN,SAACC,EAAcC,GACbN,EAAMO,KAAK,EAAKC,UAAUb,EAASc,cAAeJ,EAAMC,O,WAGxDR,IAAmBE,EAAMU,O,oBACvBC,EAAWC,IACXC,GAAUD,IACdZ,EAAMc,SAAQ,SAAAT,GACZ,IAAMU,EAAcV,EAAKW,OAAO,GAGhC,IAAK,EAAK5C,eAAe6C,SAASF,GAAc,CAC9C,IAAMZ,EAAQE,EAAKF,MAAQ,EACvBA,EAAQQ,IACVA,EAAWR,GAETE,EAAKD,IAAMS,IACbA,EAASR,EAAKD,WAIhBS,EAASvB,EAAMc,KAAOO,EAAWrB,EAAMa,O,wBAOzChB,KAAKS,kBAAL,2BACON,GADP,IACca,MAAOQ,EAAUP,IAAKS,IAClC3B,EACAS,EACAH,GACA,EACAF,G,2BAMA4B,EAAOlB,EACVmB,KAAI,SAACC,GAQJ,OAPIA,EAAWJ,OAAO,IAA+B,MAAzBI,EAAWJ,OAAO,GACvCI,EAAWJ,OAAO,GAAGC,SAAS,eACjCG,EAAWJ,OAAO,IAAlB,qBAAsCI,EAAWC,WAGnDD,EAAWJ,OAAO,GAAlB,oBAAoCI,EAAWC,UAE1CD,EAAWJ,OAAOM,KAAK,SAE/BA,KAAK,MAESnD,IAAIoD,gBAAgBL,EAAM,CACzCM,eAAe,EACfC,eAAe,EACfC,iBAAiB,EACjBC,gBAAgB,IAGTb,SAAQ,SAAAc,GAAW,OAC1B,EAAKC,eAAeD,GAAad,SAAQ,SAAAgB,GAErCC,YACED,EAAEE,IAAI,SACNF,EAAEE,IAAI,OACNjC,EAAcI,MACdJ,EAAcK,MAGhBZ,EAASyC,KAAKH,SAIpBtC,EAAS0C,W,kDAET1C,EAAS2C,MAAT,M,iJAKF1B,EACAJ,EACAC,GAEA,IAAMU,EAASX,EAAK+B,MAAM,MAG1B,MAAO,CACLjC,OAAQa,EAAOP,EAAcN,MAAQ,GACrCC,KAAMY,EAAOP,EAAcL,IAAM,GACjCiB,SAAUf,EACVU,Y,qCAImBY,GAA2B,WAChD,OAAOA,EAAYT,KACjB,SAAAkB,GAAU,OACR,IAAIC,IAAc,CAChBC,KAAM,EAAKC,YAAYH,GACvBI,GAAI,GAAF,OAAK,EAAKA,GAAV,mBAAuBJ,EAAWK,WAAWC,UAAU,W,kCAK7CJ,GAAkB,WAC9BT,EAA6B,eAAKS,GACtCT,EAAE3B,OAAoB,EACxB2B,EAAEc,OAAS,CAAE,IAAK,EAAG,KAAM,EAAG,IAAK,EAAG,SAAK/D,GAAY0D,EAAKK,QAC5Dd,EAAEe,MAAQC,OAAOP,EAAKM,OACtBf,EAAE5B,QAAUqC,EAAKQ,OACE,OAAfR,EAAKS,cACAlB,EAAEkB,MAEQ,OAAfT,EAAKM,cACAf,EAAEkB,MAEX,IAAMC,EAAgB,CACpB,QACA,MACA,SACA,QACA,OACA,SACA,QACA,UAgCF,OA9BAC,OAAOC,KAAKZ,EAAKG,YAAY5B,SAAQ,SAAArB,GACnC,IAAI2D,EAAI3D,EAAE4D,cAMV,GALIJ,EAAchC,SAASmC,KAGzBA,GAAK,KAEoB,OAAvBb,EAAKG,WAAWjD,GAAa,CAC/B,IAAI6D,EAAOf,EAAKG,WAAWjD,GAC3B,GAAI8D,MAAMC,QAAQF,IAAyB,IAAhBA,EAAK5C,OAAc,OAClC4C,EAARA,EAD0C,oBAG9CxB,EAAEsB,GAAKE,MAGXxB,EAAE5B,QAAU4B,EAAEiB,OAGVR,EAAKkB,gBAAkBlB,EAAKkB,eAAe/C,SAC7CoB,EAAE4B,YAAcnB,EAAKkB,eAClBtC,KAAI,SAAAwC,GAAS,OAAIA,EAAUxC,KAAI,SAAAyC,GAAQ,OAAI,EAAKpB,YAAYoB,SAC5DC,eAGE/B,EAAE2B,sBACF3B,EAAES,YACFT,EAAEgC,wBACFhC,EAAEiC,iBACFjC,EAAEY,kBACFZ,EAAEiB,OACFjB,I,8CAlNkBkC","file":"static/js/62.323b0e27.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport gff from '@gmod/gff'\nimport { Observer } from 'rxjs'\n\nimport { Instance } from 'mobx-state-tree'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport MyConfigSchema from './configSchema'\n\ntype Strand = '+' | '-' | '.' | '?'\ninterface FeatureLoc {\n  [key: string]: unknown\n  start: number\n  end: number\n  strand: Strand\n  seq_id: string\n  child_features: FeatureLoc[][]\n  data: unknown\n  derived_features: unknown\n  attributes: { [key: string]: unknown[] }\n}\n\ninterface LineFeature {\n  start: number\n  end: number\n  lineHash: number\n  fields: string[]\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gff: TabixIndexedFile\n\n  protected dontRedispatch: string[]\n\n  public constructor(config: Instance<typeof MyConfigSchema>) {\n    super(config)\n    const gffGzLocation = readConfObject(config, 'gffGzLocation')\n    const indexType = readConfObject(config, ['index', 'indexType'])\n    const location = readConfObject(config, ['index', 'location'])\n    const dontRedispatch = readConfObject(config, 'dontRedispatch')\n\n    this.dontRedispatch = dontRedispatch || ['chromosome', 'contig', 'region']\n    this.gff = new TabixIndexedFile({\n      filehandle: openLocation(gffGzLocation),\n      csiFilehandle: indexType === 'CSI' ? openLocation(location) : undefined,\n      tbiFilehandle: indexType !== 'CSI' ? openLocation(location) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n      renameRefSeqs: (n: string) => n,\n    })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.gff.getReferenceSequenceNames(opts)\n  }\n\n  public async getHeader() {\n    return this.gff.getHeader()\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const metadata = await this.gff.getMetadata()\n      this.getFeaturesHelper(query, opts, metadata, observer, true)\n    }, opts.signal)\n  }\n\n  private async getFeaturesHelper(\n    query: NoAssemblyRegion,\n    opts: BaseOptions = {},\n    metadata: { columnNumbers: { start: number; end: number } },\n    observer: Observer<Feature>,\n    allowRedispatch: boolean,\n    originalQuery = query,\n  ) {\n    try {\n      const lines: LineFeature[] = []\n\n      await this.gff.getLines(\n        query.refName,\n        query.start,\n        query.end,\n        (line: string, fileOffset: number) => {\n          lines.push(this.parseLine(metadata.columnNumbers, line, fileOffset))\n        },\n      )\n      if (allowRedispatch && lines.length) {\n        let minStart = Infinity\n        let maxEnd = -Infinity\n        lines.forEach(line => {\n          const featureType = line.fields[2]\n          // only expand redispatch range if feature is not a \"dontRedispatch\" type\n          // skips large regions like chromosome,region\n          if (!this.dontRedispatch.includes(featureType)) {\n            const start = line.start - 1 // gff is 1-based\n            if (start < minStart) {\n              minStart = start\n            }\n            if (line.end > maxEnd) {\n              maxEnd = line.end\n            }\n          }\n        })\n        if (maxEnd > query.end || minStart < query.start) {\n          // console.log(\n          //   `redispatching ${query.start}-${query.end} => ${minStart}-${maxEnd}`,\n          // )\n          // make a new feature callback to only return top-level features\n          // in the original query range\n\n          this.getFeaturesHelper(\n            { ...query, start: minStart, end: maxEnd },\n            opts,\n            metadata,\n            observer,\n            false,\n            query,\n          )\n          return\n        }\n      }\n\n      const gff3 = lines\n        .map((lineRecord: LineFeature) => {\n          if (lineRecord.fields[8] && lineRecord.fields[8] !== '.') {\n            if (!lineRecord.fields[8].includes('_lineHash')) {\n              lineRecord.fields[8] += `;_lineHash=${lineRecord.lineHash}`\n            }\n          } else {\n            lineRecord.fields[8] = `_lineHash=${lineRecord.lineHash}`\n          }\n          return lineRecord.fields.join('\\t')\n        })\n        .join('\\n')\n\n      const features = gff.parseStringSync(gff3, {\n        parseFeatures: true,\n        parseComments: false,\n        parseDirectives: false,\n        parseSequences: false,\n      }) as FeatureLoc[][]\n\n      features.forEach(featureLocs =>\n        this.formatFeatures(featureLocs).forEach(f => {\n          if (\n            doesIntersect2(\n              f.get('start'),\n              f.get('end'),\n              originalQuery.start,\n              originalQuery.end,\n            )\n          ) {\n            observer.next(f)\n          }\n        }),\n      )\n      observer.complete()\n    } catch (e) {\n      observer.error(e)\n    }\n  }\n\n  private parseLine(\n    columnNumbers: { start: number; end: number },\n    line: string,\n    fileOffset: number,\n  ) {\n    const fields = line.split('\\t')\n\n    // note: index column numbers are 1-based\n    return {\n      start: +fields[columnNumbers.start - 1],\n      end: +fields[columnNumbers.end - 1],\n      lineHash: fileOffset,\n      fields,\n    }\n  }\n\n  private formatFeatures(featureLocs: FeatureLoc[]) {\n    return featureLocs.map(\n      featureLoc =>\n        new SimpleFeature({\n          data: this.featureData(featureLoc),\n          id: `${this.id}-offset-${featureLoc.attributes._lineHash[0]}`,\n        }),\n    )\n  }\n\n  private featureData(data: FeatureLoc) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    f.strand = { '+': 1, '-': -1, '.': 0, '?': undefined }[data.strand] // convert strand\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = [\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ]\n    Object.keys(data.attributes).forEach(a => {\n      let b = a.toLowerCase()\n      if (defaultFields.includes(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (data.attributes[a] !== null) {\n        let attr = data.attributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    })\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length) {\n      f.subfeatures = data.child_features\n        .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))\n        .flat()\n    }\n\n    delete f.child_features\n    delete f.data\n    delete f.derived_features\n    delete f._linehash\n    delete f.attributes\n    delete f.seq_id\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"sourceRoot":""}