{"version":3,"sources":["../../../plugins/linear-comparative-view/src/LinearComparativeView/components/Header.tsx","../../../plugins/linear-comparative-view/src/LinearComparativeView/components/LinearComparativeView.tsx"],"names":["useStyles","makeStyles","theme","headerBar","gridArea","display","spacer","flexGrow","emphasis","background","palette","secondary","main","padding","spacing","hovered","light","displayName","paddingTop","paddingLeft","paddingRight","inputBase","color","contrastText","inputRoot","backgroundColor","inputFocused","borderColor","primary","InteractWithSquiggles","observer","model","IconButton","onClick","toggleInteract","title","interactToggled","LinkViews","toggleLinkViews","linkViews","Sync","toggleIntraviewLinks","showIntraviewLinks","Header","size","classes","setHeaderHeight","height","className","withSize","monitorHeight","root","position","marginBottom","overflow","breakpointMarker","top","width","viewContainer","marginTop","container","overlay","zIndex","content","Overlays","tracks","map","track","displays","RenderingComponent","key","getConf","style","MiddleComparativeView","views","ReactComponent","getEnv","pluginManager","getViewType","type","OverlayComparativeView","view","id","LinearComparativeView","some","t","d"],"mappings":"wTAaMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,SAAU,kBACVC,QAAS,QAEXC,OAAQ,CACNC,SAAU,GAEZC,SAAU,CACRC,WAAYP,EAAMQ,QAAQC,UAAUC,KACpCC,QAASX,EAAMY,QAAQ,IAEzBC,QAAS,CACPN,WAAYP,EAAMQ,QAAQC,UAAUK,OAEtCC,YAAa,CACXR,WAAYP,EAAMQ,QAAQC,UAAUC,KACpCM,WAAY,EACZC,YAAajB,EAAMY,QAAQ,GAC3BM,aAAclB,EAAMY,QAAQ,IAE9BO,UAAW,CACTC,MAAOpB,EAAMQ,QAAQC,UAAUY,cAEjCC,UAAW,CACT,UAAW,CACTC,gBAAiBvB,EAAMQ,QAAQC,UAAUK,QAG7CU,aAAc,CACZC,YAAazB,EAAMQ,QAAQkB,QAAQhB,KACnCa,gBAAiBvB,EAAMQ,QAAQC,UAAUK,WAIvCa,EAAwBC,oBAC5B,YAAsD,IAAnDC,EAAmD,EAAnDA,MACD,OACE,kBAACC,EAAA,EAAD,CACEC,QAASF,EAAMG,eACfC,MAAM,uCAELJ,EAAMK,gBACL,kBAAC,IAAD,MAEA,kBAAC,IAAD,UAOJC,EAAYP,oBAChB,YAAsD,IAAnDC,EAAmD,EAAnDA,MACD,OACE,kBAACC,EAAA,EAAD,CACEC,QAASF,EAAMO,gBACfH,MAAM,mDAELJ,EAAMQ,UACL,kBAAC,IAAD,CAAUjB,MAAM,cAEhB,kBAAC,IAAD,CAAaA,MAAM,kBAOvBkB,EAAOV,oBAAS,YAAsD,IAAnDC,EAAmD,EAAnDA,MACvB,OACE,kBAACC,EAAA,EAAD,CACEC,QAASF,EAAMU,qBACfN,MAAM,oCAELJ,EAAMW,mBACL,kBAAC,IAAD,CAAapB,MAAM,cAEnB,kBAAC,IAAD,CAAgBA,MAAM,kBAMxBqB,EAASb,oBACb,YAMM,IALJC,EAKI,EALJA,MACAa,EAII,EAJJA,KAKMC,EAAU7C,IAGhB,OADA+B,EAAMe,gBAAgBF,EAAKG,QAEzB,yBAAKC,UAAWH,EAAQ1C,WACtB,kBAACkC,EAAD,CAAWN,MAAOA,IAClB,kBAACF,EAAD,CAAuBE,MAAOA,IAC9B,kBAACS,EAAD,CAAMT,MAAOA,IAEb,yBAAKiB,UAAWH,EAAQvC,aAMjB2C,qBAAS,CAAEC,eAAe,GAA1BD,CAAkCN,GC/G3C3C,EAAYC,aAAW,SAAAC,GAC3B,MAAO,CACLiD,KAAM,CACJC,SAAU,WACVC,aAAcnD,EAAMY,QAAQ,GAC5BwC,SAAU,UAEZC,iBAAkB,CAChBH,SAAU,WACVI,IAAK,EACLT,OAAQ,OACRU,MAAO,MACPhD,WAAY,WAEdiD,cAAe,CACbC,UAAW,OAEbC,UAAW,CACTvD,QAAS,QAEXwD,QAAS,CACPC,OAAQ,IACR1D,SAAU,OAEZ2D,QAAS,CACP3D,SAAU,WAQV4D,EAAWlC,oBAAS,YAAsB,IAAnBC,EAAmB,EAAnBA,MACrBc,EAAU7C,IAChB,OACE,oCACG+B,EAAMkC,OAAOC,KAAI,SAAAC,GAAS,IAClB9D,EADkB,YACP8D,EAAMC,SADC,MAEjBC,EAAuBhE,EAAvBgE,mBACR,OAAOA,EACL,yBACErB,UAAWH,EAAQgB,QACnBS,IAAKC,kBAAQJ,EAAO,WACpBK,MAAO,CAAEzB,OAAQ1C,EAAQ0C,SAEzB,kBAACsB,EAAD,CAAoBtC,MAAO1B,KAE3B,YAONoE,EAAwB3C,oBAAS,YAAsB,IAAnBC,EAAmB,EAAnBA,MAClCc,EAAU7C,IACR0E,EAAU3C,EAAV2C,MAKAC,EAJkBC,iBAAO7C,GAAzB8C,cAGuBC,YAAYJ,EAAM,GAAGK,MAC5CJ,eAER,OACE,6BACE,kBAAC,EAAD,CAAQ5C,MAAOA,IACf,yBAAKiB,UAAWH,EAAQe,WACtB,kBAACe,EAAD,CAAgB5C,MAAO2C,EAAM,KAC7B,yBAAKF,MAAO,CAAEnE,QAAS,SACrB,kBAAC2D,EAAD,CAAUjC,MAAOA,KAEnB,kBAAC4C,EAAD,CAAgB5C,MAAO2C,EAAM,UAK/BM,EAAyBlD,oBAAS,YAAsB,IAAnBC,EAAmB,EAAnBA,MACnCc,EAAU7C,IACR0E,EAAU3C,EAAV2C,MACAG,EAAkBD,iBAAO7C,GAAzB8C,cACR,OACE,6BACE,kBAAC,EAAD,CAAQ9C,MAAOA,IACf,yBAAKiB,UAAWH,EAAQe,WACtB,yBAAKZ,UAAWH,EAAQkB,SACtB,yBAAKS,MAAO,CAAEpB,SAAU,aACrBsB,EAAMR,KAAI,SAAAe,GAET,IACQN,EADSE,EAAcC,YAAYG,EAAKF,MACxCJ,eACR,OAAO,kBAACA,EAAD,CAAgBL,IAAKW,EAAKC,GAAInD,MAAOkD,QAGhD,kBAACjB,EAAD,CAAUjC,MAAOA,UAOrBoD,EAAwBrD,oBAAS,YAAsB,IAAnBC,EAAmB,EAAnBA,MAIxC,OAHeA,EAAMkC,OAAOmB,MAAK,SAAAC,GAAC,OAChCA,EAAEjB,SAASgB,MAAK,SAACE,GAAD,OAA8Bf,kBAAQe,EAAG,gBAGzD,kBAACb,EAAD,CAAuB1C,MAAOA,IAE9B,kBAACiD,EAAD,CAAwBjD,MAAOA,OAIpBoD","file":"static/js/65.91934554.chunk.js","sourcesContent":["import React from 'react'\nimport LeakAddIcon from '@material-ui/icons/LeakAdd'\nimport LeakRemoveIcon from '@material-ui/icons/LeakRemove'\nimport LinkIcon from '@material-ui/icons/Link'\nimport LinkOffIcon from '@material-ui/icons/LinkOff'\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching'\nimport LocationDisabledIcon from '@material-ui/icons/LocationDisabled'\nimport IconButton from '@material-ui/core/IconButton'\nimport { withSize } from 'react-sizeme'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { observer } from 'mobx-react'\nimport { LinearComparativeViewModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  headerBar: {\n    gridArea: '1/1/auto/span 2',\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  emphasis: {\n    background: theme.palette.secondary.main,\n    padding: theme.spacing(1),\n  },\n  hovered: {\n    background: theme.palette.secondary.light,\n  },\n  displayName: {\n    background: theme.palette.secondary.main,\n    paddingTop: 3,\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n  inputBase: {\n    color: theme.palette.secondary.contrastText,\n  },\n  inputRoot: {\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.light,\n    },\n  },\n  inputFocused: {\n    borderColor: theme.palette.primary.main,\n    backgroundColor: theme.palette.secondary.light,\n  },\n}))\n\nconst InteractWithSquiggles = observer(\n  ({ model }: { model: LinearComparativeViewModel }) => {\n    return (\n      <IconButton\n        onClick={model.toggleInteract}\n        title=\"Toggle interacting with the overlay\"\n      >\n        {model.interactToggled ? (\n          <LocationSearchingIcon />\n        ) : (\n          <LocationDisabledIcon />\n        )}\n      </IconButton>\n    )\n  },\n)\n\nconst LinkViews = observer(\n  ({ model }: { model: LinearComparativeViewModel }) => {\n    return (\n      <IconButton\n        onClick={model.toggleLinkViews}\n        title=\"Toggle linked scrolls and behavior across views\"\n      >\n        {model.linkViews ? (\n          <LinkIcon color=\"secondary\" />\n        ) : (\n          <LinkOffIcon color=\"secondary\" />\n        )}\n      </IconButton>\n    )\n  },\n)\n\nconst Sync = observer(({ model }: { model: LinearComparativeViewModel }) => {\n  return (\n    <IconButton\n      onClick={model.toggleIntraviewLinks}\n      title=\"Toggle rendering intraview links\"\n    >\n      {model.showIntraviewLinks ? (\n        <LeakAddIcon color=\"secondary\" />\n      ) : (\n        <LeakRemoveIcon color=\"secondary\" />\n      )}\n    </IconButton>\n  )\n})\n\nconst Header = observer(\n  ({\n    model,\n    size,\n  }: {\n    model: LinearComparativeViewModel\n    size: { height: number }\n  }) => {\n    const classes = useStyles()\n\n    model.setHeaderHeight(size.height)\n    return (\n      <div className={classes.headerBar}>\n        <LinkViews model={model} />\n        <InteractWithSquiggles model={model} />\n        <Sync model={model} />\n\n        <div className={classes.spacer} />\n      </div>\n    )\n  },\n)\n\nexport default withSize({ monitorHeight: true })(Header)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { getEnv } from 'mobx-state-tree'\nimport { LinearComparativeViewModel } from '../model'\nimport Header from './Header'\n\nconst useStyles = makeStyles(theme => {\n  return {\n    root: {\n      position: 'relative',\n      marginBottom: theme.spacing(1),\n      overflow: 'hidden',\n    },\n    breakpointMarker: {\n      position: 'absolute',\n      top: 0,\n      height: '100%',\n      width: '3px',\n      background: 'magenta',\n    },\n    viewContainer: {\n      marginTop: '3px',\n    },\n    container: {\n      display: 'grid',\n    },\n    overlay: {\n      zIndex: 100,\n      gridArea: '1/1',\n    },\n    content: {\n      gridArea: '1/1',\n    },\n  }\n})\n\ninterface Props {\n  model: LinearComparativeViewModel\n}\nconst Overlays = observer(({ model }: Props) => {\n  const classes = useStyles()\n  return (\n    <>\n      {model.tracks.map(track => {\n        const [display] = track.displays\n        const { RenderingComponent } = display\n        return RenderingComponent ? (\n          <div\n            className={classes.overlay}\n            key={getConf(track, 'trackId')}\n            style={{ height: display.height }}\n          >\n            <RenderingComponent model={display} />\n          </div>\n        ) : null\n      })}\n    </>\n  )\n})\n\n// The comparative is in the middle of the views\nconst MiddleComparativeView = observer(({ model }: Props) => {\n  const classes = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const viewType = pluginManager.getViewType(views[0].type) as any\n  const { ReactComponent } = viewType\n\n  return (\n    <div>\n      <Header model={model} />\n      <div className={classes.container}>\n        <ReactComponent model={views[0]} />\n        <div style={{ display: 'grid' }}>\n          <Overlays model={model} />\n        </div>\n        <ReactComponent model={views[1]} />\n      </div>\n    </div>\n  )\n})\nconst OverlayComparativeView = observer(({ model }: Props) => {\n  const classes = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n  return (\n    <div>\n      <Header model={model} />\n      <div className={classes.container}>\n        <div className={classes.content}>\n          <div style={{ position: 'relative' }}>\n            {views.map(view => {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const viewType = pluginManager.getViewType(view.type) as any\n              const { ReactComponent } = viewType\n              return <ReactComponent key={view.id} model={view} />\n            })}\n          </div>\n          <Overlays model={model} />\n        </div>\n      </div>\n    </div>\n  )\n})\n\nconst LinearComparativeView = observer(({ model }: Props) => {\n  const middle = model.tracks.some(t =>\n    t.displays.some((d: AnyConfigurationModel) => getConf(d, 'middle')),\n  )\n  return middle ? (\n    <MiddleComparativeView model={model} />\n  ) : (\n    <OverlayComparativeView model={model} />\n  )\n})\n\nexport default LinearComparativeView\n"],"sourceRoot":""}