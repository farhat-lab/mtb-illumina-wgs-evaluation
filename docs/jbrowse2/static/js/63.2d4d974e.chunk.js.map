{"version":3,"sources":["../../../plugins/hic/src/HicAdapter/HicAdapter.ts"],"names":["GenericFilehandleWrapper","filehandle","this","position","length","read","Buffer","allocUnsafe","buffer","bytesRead","slice","openFilehandleWrapper","location","openLocation","HicAdapter","config","hic","hicLocation","readConfObject","HicStraw","file","opts","statusCallback","getMetaData","result","setup","ret","chromosomes","rest","metadata","map","chr","name","bpPerPx","resolutions","chosenResolution","i","r","region","ObservableCreate","observer","a","refName","start","end","resolution","getResolution","res","getContactRecords","forEach","record","next","complete","signal","BaseFeatureDataAdapter"],"mappings":"0VAyCMA,E,WAGJ,WAAYC,GAA+B,yBAFnCA,gBAEmC,EACzCC,KAAKD,WAAaA,E,0FAGTE,EAAkBC,G,2FACSF,KAAKD,WAAWI,KAClDC,EAAOC,YAAYH,GACnB,EACAA,EACAD,G,uBAJMK,E,EAAAA,OAAQC,E,EAAAA,U,kBAMTD,EAAOA,OAAOE,MAAM,EAAGD,I,gHAG3B,SAASE,EAAsBC,GACpC,OAAO,IAAIZ,EAAyBa,uBAAaD,I,IAG9BE,E,kDAYnB,WAAmBC,GAAyC,2BAC1D,cAAMA,IAZAC,SAWoD,EAE1D,IAAMC,EAAcC,yBAAeH,EAAQ,eAFe,OAG1D,EAAKC,IAAM,IAAIG,IAAS,CACtBC,KAAMT,EAAsBM,KAJ4B,E,2FAQxCI,G,qFACoBA,GAAQ,IAAtCC,uB,MAAiB,a,GACV,2B,SACMpB,KAAKc,IAAIO,c,cAAxBC,E,OACNF,EAAe,I,kBACRE,G,gLAGcH,G,yFACHnB,KAAKuB,MAAMJ,G,cAAvBK,E,OAC2BA,EAAzBC,YAAgBC,E,YAASF,E,mCAC1BE,G,kLAGSP,G,uFACOnB,KAAKuB,MAAMJ,G,cAA5BQ,E,yBACCA,EAASF,YAAYG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,S,oLAGzBC,EAAiBZ,G,+FACZnB,KAAKuB,MAAMJ,G,OAIlC,IAJMQ,E,OACEK,EAAgBL,EAAhBK,YACJC,EAAmBD,EAAYA,EAAY9B,OAAS,GAE/CgC,EAAIF,EAAY9B,OAAS,EAAGgC,GAAK,EAAGA,GAAK,GAC1CC,EAAIH,EAAYE,KACb,EAAIH,IACXE,EAAmBE,G,yBAGhBF,G,2IAGGG,GAAuC,WAAvBjB,EAAuB,uDAAJ,GAC7C,OAAOkB,2BAAgB,uCAAgB,WAAMC,GAAN,+BAAAC,EAAA,6DACpBV,EAAoBO,EAA7BI,QAAcC,EAAeL,EAAfK,MAAOC,EAAQN,EAARM,IACrBC,EAAuDxB,EAAvDwB,WAF6B,EAE0BxB,EAA3CY,eAFiB,MAEP,EAFO,IAE0BZ,EAA9BC,sBAFI,MAEa,aAFb,WAGnB,EAAKwB,cAAcb,GAAWY,GAAc,KAAOxB,GAHhC,cAG/B0B,EAH+B,OAIrCzB,EAAe,yBAJsB,SAMf,EAAKN,IAAIgC,kBAC7B,KACA,CAAEL,QAAOZ,MAAKa,OACd,CAAED,QAAOZ,MAAKa,OACd,KACAG,GAXmC,cAa7BE,SAAQ,SAAAC,GACdV,EAASW,KAAKD,MAEhB5B,EAAe,IACfkB,EAASY,WAjB4B,4CAAhB,sDAkBpB/B,EAAKgC,U,8CAxE4BC,2B","file":"static/js/63.2d4d974e.chunk.js","sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region, FileLocation } from '@jbrowse/core/util/types'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { Instance } from 'mobx-state-tree'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport type { GenericFilehandle } from 'generic-filehandle'\nimport HicStraw from 'hic-straw'\nimport MyConfigSchema from './configSchema'\n\ninterface ContactRecord {\n  bin1: number\n  bin2: number\n  counts: number\n}\n\ninterface HicMetadata {\n  chromosomes: {\n    name: string\n    length: number\n    id: number\n  }[]\n  resolutions: number[]\n}\ninterface Ref {\n  chr: string\n  start: number\n  end: number\n}\n\ninterface HicOptions extends BaseOptions {\n  resolution?: number\n  bpPerPx?: number\n}\n\n// wraps generic-filehandle so the read function only takes a position and length\n// in some ways, generic-filehandle wishes it was just this but it has\n// to adapt to the node.js fs promises API\nclass GenericFilehandleWrapper {\n  private filehandle: GenericFilehandle\n\n  constructor(filehandle: GenericFilehandle) {\n    this.filehandle = filehandle\n  }\n\n  async read(position: number, length: number) {\n    const { buffer, bytesRead } = await this.filehandle.read(\n      Buffer.allocUnsafe(length),\n      0,\n      length,\n      position,\n    )\n    return buffer.buffer.slice(0, bytesRead)\n  }\n}\nexport function openFilehandleWrapper(location: FileLocation) {\n  return new GenericFilehandleWrapper(openLocation(location))\n}\n\nexport default class HicAdapter extends BaseFeatureDataAdapter {\n  private hic: {\n    getContactRecords: (\n      normalize: string,\n      ref: Ref,\n      ref2: Ref,\n      units: string,\n      binsize: number,\n    ) => Promise<ContactRecord[]>\n    getMetaData: () => Promise<HicMetadata>\n  }\n\n  public constructor(config: Instance<typeof MyConfigSchema>) {\n    super(config)\n    const hicLocation = readConfObject(config, 'hicLocation')\n    this.hic = new HicStraw({\n      file: openFilehandleWrapper(hicLocation),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    statusCallback('Downloading .hic header')\n    const result = await this.hic.getMetaData()\n    statusCallback('')\n    return result\n  }\n\n  public async getHeader(opts?: BaseOptions) {\n    const ret = await this.setup(opts)\n    const { chromosomes, ...rest } = ret\n    return rest\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    return metadata.chromosomes.map(chr => chr.name)\n  }\n\n  async getResolution(bpPerPx: number, opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    const { resolutions } = metadata\n    let chosenResolution = resolutions[resolutions.length - 1]\n\n    for (let i = resolutions.length - 1; i >= 0; i -= 1) {\n      const r = resolutions[i]\n      if (r <= 2 * bpPerPx) {\n        chosenResolution = r\n      }\n    }\n    return chosenResolution\n  }\n\n  getFeatures(region: Region, opts: HicOptions = {}) {\n    return ObservableCreate<ContactRecord>(async observer => {\n      const { refName: chr, start, end } = region\n      const { resolution, bpPerPx = 1, statusCallback = () => {} } = opts\n      const res = await this.getResolution(bpPerPx / (resolution || 1000), opts)\n      statusCallback('Downloading .hic data')\n\n      const records = await this.hic.getContactRecords(\n        'KR',\n        { start, chr, end },\n        { start, chr, end },\n        'BP',\n        res,\n      )\n      records.forEach(record => {\n        observer.next(record)\n      })\n      statusCallback('')\n      observer.complete()\n    }, opts.signal) as any // eslint-disable-line @typescript-eslint/no-explicit-any\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}