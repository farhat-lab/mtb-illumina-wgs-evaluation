{"version":3,"sources":["../../../plugins/sequence/src/IndexedFastaAdapter/IndexedFastaAdapter.ts"],"names":["config","fasta","seqCache","AbortablePromiseCache","cache","LRU","maxSize","fill","args","a","refName","start","end","getSequence","fastaLocation","readConfObject","faiLocation","Error","fastaOpts","openLocation","fai","IndexedFasta","this","getSequenceNames","getSequenceSizes","seqSizes","Object","keys","map","ObservableCreate","observer","getSequenceSize","size","regionEnd","undefined","Math","min","chunks","e","chunkStart","s","r","push","get","JSON","stringify","Promise","all","seq","join","slice","next","SimpleFeature","id","data","complete","BaseFeatureDataAdapter"],"mappings":"sWA4BE,WAAmBA,GAA+B,2BAChD,cAAMA,IAdEC,WAawC,IAX1CC,SAAW,IAAIC,IAAsB,CAC3CC,MAAO,IAAIC,IAAI,CAAEC,QAAS,MAC1BC,KAAM,WAAF,4BAAE,WACJC,GADI,mBAAAC,EAAA,6DAIIC,EAAwBF,EAAxBE,QAASC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,IAJpB,kBAKG,EAAKX,MAAMY,YAAYH,EAASC,EAAOC,IAL1C,2CAAF,mDAAE,KAWN,IAAME,EAAgBC,yBAAef,EAAQ,iBACvCgB,EAAcD,yBAAef,EAAQ,eAC3C,IAAKc,EACH,MAAM,IAAIG,MAAM,8BAElB,IAAKD,EACH,MAAM,IAAIC,MAAM,4BAElB,IAAMC,EAAY,CAChBjB,MAAOkB,uBAAaL,GACpBM,IAAKD,uBAAaH,IAZ4B,OAehD,EAAKf,MAAQ,IAAIoB,eAAaH,GAfkB,E,0DAmBhD,OAAOI,KAAKrB,MAAMsB,qB,mKAIKD,KAAKrB,MAAMuB,mB,cAA5BC,E,yBACCC,OAAOC,KAAKF,GAAUG,KAC3B,SAAClB,GAAD,MAAwC,CACtCA,UACAC,MAAO,EACPC,IAAKa,EAASf,Q,2IAU0C,WAAzCA,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,IACnC,OAAOiB,2BAAgB,uCAAU,WAAMC,GAAN,6BAAArB,EAAA,sEACZ,EAAKR,MAAM8B,gBAAgBrB,GADf,OAQ/B,IAPMsB,EADyB,OAEzBC,OAAqBC,IAATF,EAAqBG,KAAKC,IAAIJ,EAAMpB,GAAOA,EACvDyB,EAAS,GACG,MAGZC,EAAI1B,GAHQ,MAGYA,EAHZ,OAIT2B,EAFHC,EAAI7B,EAASA,EAFD,MAIO4B,EAAaD,EAAGC,GAJvB,MAKVE,EAAI,CACR/B,UACAC,MAAO4B,EACP3B,IAAK2B,EARS,OAUhBF,EAAOK,KAAK,EAAKxC,SAASyC,IAAIC,KAAKC,UAAUJ,GAAIA,IAdpB,iBAgBZK,QAAQC,IAAIV,GAhBA,SAgBzBW,EAhByB,OAiB5BC,KAAK,IACLC,MAAMvC,EAAQ6B,GACdU,MAAM,EAAGtC,EAAMD,KAEhBmB,EAASqB,KACP,IAAIC,IAAc,CAChBC,GAAI,GAAF,OAAK3C,EAAL,YAAgBC,EAAhB,YAAyBsB,GAC3BqB,KAAM,CAAE5C,UAASC,QAAOC,IAAKqB,EAAWe,UAI9ClB,EAASyB,WA5BsB,4CAAV,yD,8CArDEC","file":"static/js/71.c7fe202c.chunk.js","sourcesContent":["import { IndexedFasta } from '@gmod/indexedfasta'\nimport {\n  BaseFeatureDataAdapter,\n  SequenceAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation, NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from '@jbrowse/core/util/QuickLRU'\n\nexport default class extends BaseFeatureDataAdapter implements SequenceAdapter {\n  protected fasta: typeof IndexedFasta\n\n  private seqCache = new AbortablePromiseCache({\n    cache: new LRU({ maxSize: 200 }),\n    fill: async (\n      args: { refName: string; start: number; end: number },\n      // abortSignal?: AbortSignal,\n    ) => {\n      const { refName, start, end } = args\n      return this.fasta.getSequence(refName, start, end)\n    },\n  })\n\n  public constructor(config: AnyConfigurationModel) {\n    super(config)\n    const fastaLocation = readConfObject(config, 'fastaLocation')\n    const faiLocation = readConfObject(config, 'faiLocation')\n    if (!fastaLocation) {\n      throw new Error('must provide fastaLocation')\n    }\n    if (!faiLocation) {\n      throw new Error('must provide faiLocation')\n    }\n    const fastaOpts = {\n      fasta: openLocation(fastaLocation as FileLocation),\n      fai: openLocation(faiLocation as FileLocation),\n    }\n\n    this.fasta = new IndexedFasta(fastaOpts)\n  }\n\n  public getRefNames() {\n    return this.fasta.getSequenceNames()\n  }\n\n  public async getRegions(): Promise<NoAssemblyRegion[]> {\n    const seqSizes = await this.fasta.getSequenceSizes()\n    return Object.keys(seqSizes).map(\n      (refName: string): NoAssemblyRegion => ({\n        refName,\n        start: 0,\n        end: seqSizes[refName],\n      }),\n    )\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.fasta.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const chunks = []\n      const chunkSize = 128000\n\n      const s = start - (start % chunkSize)\n      const e = end + (chunkSize - (end % chunkSize))\n      for (let chunkStart = s; chunkStart < e; chunkStart += chunkSize) {\n        const r = {\n          refName,\n          start: chunkStart,\n          end: chunkStart + chunkSize,\n        }\n        chunks.push(this.seqCache.get(JSON.stringify(r), r))\n      }\n      const seq = (await Promise.all(chunks))\n        .join('')\n        .slice(start - s)\n        .slice(0, end - start)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"sourceRoot":""}